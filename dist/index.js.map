{"version":3,"file":"index.js","mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzzvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChlpvtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtfpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpBA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;AEDA;AACA;AACA;AACA","sources":["../webpack://open-ai-reviewer/./lib/main.js","../webpack://open-ai-reviewer/./node_modules/@actions/core/lib/command.js","../webpack://open-ai-reviewer/./node_modules/@actions/core/lib/core.js","../webpack://open-ai-reviewer/./node_modules/@actions/core/lib/file-command.js","../webpack://open-ai-reviewer/./node_modules/@actions/core/lib/oidc-utils.js","../webpack://open-ai-reviewer/./node_modules/@actions/core/lib/path-utils.js","../webpack://open-ai-reviewer/./node_modules/@actions/core/lib/summary.js","../webpack://open-ai-reviewer/./node_modules/@actions/core/lib/utils.js","../webpack://open-ai-reviewer/./node_modules/@actions/http-client/lib/auth.js","../webpack://open-ai-reviewer/./node_modules/@actions/http-client/lib/index.js","../webpack://open-ai-reviewer/./node_modules/@actions/http-client/lib/proxy.js","../webpack://open-ai-reviewer/./node_modules/gitea-js/dist/index.js","../webpack://open-ai-reviewer/./node_modules/tunnel/index.js","../webpack://open-ai-reviewer/./node_modules/tunnel/lib/tunnel.js","../webpack://open-ai-reviewer/./node_modules/uuid/dist/index.js","../webpack://open-ai-reviewer/./node_modules/uuid/dist/md5.js","../webpack://open-ai-reviewer/./node_modules/uuid/dist/nil.js","../webpack://open-ai-reviewer/./node_modules/uuid/dist/parse.js","../webpack://open-ai-reviewer/./node_modules/uuid/dist/regex.js","../webpack://open-ai-reviewer/./node_modules/uuid/dist/rng.js","../webpack://open-ai-reviewer/./node_modules/uuid/dist/sha1.js","../webpack://open-ai-reviewer/./node_modules/uuid/dist/stringify.js","../webpack://open-ai-reviewer/./node_modules/uuid/dist/v1.js","../webpack://open-ai-reviewer/./node_modules/uuid/dist/v3.js","../webpack://open-ai-reviewer/./node_modules/uuid/dist/v35.js","../webpack://open-ai-reviewer/./node_modules/uuid/dist/v4.js","../webpack://open-ai-reviewer/./node_modules/uuid/dist/v5.js","../webpack://open-ai-reviewer/./node_modules/uuid/dist/validate.js","../webpack://open-ai-reviewer/./node_modules/uuid/dist/version.js","../webpack://open-ai-reviewer/external node-commonjs \"assert\"","../webpack://open-ai-reviewer/external node-commonjs \"crypto\"","../webpack://open-ai-reviewer/external node-commonjs \"events\"","../webpack://open-ai-reviewer/external node-commonjs \"fs\"","../webpack://open-ai-reviewer/external node-commonjs \"http\"","../webpack://open-ai-reviewer/external node-commonjs \"https\"","../webpack://open-ai-reviewer/external node-commonjs \"net\"","../webpack://open-ai-reviewer/external node-commonjs \"os\"","../webpack://open-ai-reviewer/external node-commonjs \"path\"","../webpack://open-ai-reviewer/external node-commonjs \"tls\"","../webpack://open-ai-reviewer/external node-commonjs \"util\"","../webpack://open-ai-reviewer/webpack/bootstrap","../webpack://open-ai-reviewer/webpack/runtime/compat","../webpack://open-ai-reviewer/webpack/before-startup","../webpack://open-ai-reviewer/webpack/startup","../webpack://open-ai-reviewer/webpack/after-startup"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gitea_js_1 = require(\"gitea-js\");\nconst core = __importStar(require(\"@actions/core\"));\nconst fs_1 = require(\"fs\");\nconst GITEA_TOKEN = core.getInput(\"GITEA_TOKEN\");\nconst OPENAI_API_KEY = core.getInput(\"OPENAI_API_KEY\");\nconst OPENAI_API_MODEL = core.getInput(\"OPENAI_API_MODEL\");\nconst OPENAI_API_BASE_URL = core.getInput(\"OPENAI_API_BASE_URL\");\nconst GITEA_URL = process.env.GITHUB_SERVER_URL;\nconst gitea = (0, gitea_js_1.giteaApi)(GITEA_URL, {\n    token: GITEA_TOKEN,\n    customFetch: fetch,\n});\nfunction getPRDetails() {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n        const repoPath = process.env.GITHUB_REPOSITORY;\n        const pull_number = process.env.GITHUB_REF_NAME;\n        const [owner, repo] = repoPath.split(\"/\");\n        const pr = yield gitea.repos.repoGetPullRequest(owner, repo, parseInt(pull_number));\n        return {\n            owner,\n            repo,\n            pull_number: parseInt(pull_number),\n            title: (_a = pr.data.title) !== null && _a !== void 0 ? _a : \"\",\n            description: (_b = pr.data.body) !== null && _b !== void 0 ? _b : \"\",\n        };\n    });\n}\nfunction main() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        // Set development environment variables\n        process.env.GITHUB_REPOSITORY = \"cerberus/cerberus\";\n        process.env.GITHUB_REF_NAME = \"13\";\n        const prDetails = yield getPRDetails();\n        console.log(prDetails);\n        const eventData = JSON.parse((0, fs_1.readFileSync)((_a = process.env.GITHUB_EVENT_PATH) !== null && _a !== void 0 ? _a : \"\", \"utf8\"));\n        console.log(eventData);\n    });\n}\nmain().catch((error) => {\n    console.error(\"Error:\", error);\n    process.exit(1);\n});\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.issue = exports.issueCommand = void 0;\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst oidc_utils_1 = require(\"./oidc-utils\");\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = utils_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        return file_command_1.issueFileCommand('ENV', file_command_1.prepareKeyValueMessage(name, val));\n    }\n    command_1.issueCommand('set-env', { name }, convertedVal);\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        file_command_1.issueFileCommand('PATH', inputPath);\n    }\n    else {\n        command_1.issueCommand('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.\n * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.\n * Returns an empty string if the value is not defined.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    if (options && options.trimWhitespace === false) {\n        return val;\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Gets the values of an multiline input.  Each value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string[]\n *\n */\nfunction getMultilineInput(name, options) {\n    const inputs = getInput(name, options)\n        .split('\\n')\n        .filter(x => x !== '');\n    if (options && options.trimWhitespace === false) {\n        return inputs;\n    }\n    return inputs.map(input => input.trim());\n}\nexports.getMultilineInput = getMultilineInput;\n/**\n * Gets the input value of the boolean type in the YAML 1.2 \"core schema\" specification.\n * Support boolean input list: `true | True | TRUE | false | False | FALSE` .\n * The return value is also in boolean type.\n * ref: https://yaml.org/spec/1.2/spec.html#id2804923\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   boolean\n */\nfunction getBooleanInput(name, options) {\n    const trueValue = ['true', 'True', 'TRUE'];\n    const falseValue = ['false', 'False', 'FALSE'];\n    const val = getInput(name, options);\n    if (trueValue.includes(val))\n        return true;\n    if (falseValue.includes(val))\n        return false;\n    throw new TypeError(`Input does not meet YAML 1.2 \"Core Schema\" specification: ${name}\\n` +\n        `Support boolean input list: \\`true | True | TRUE | false | False | FALSE\\``);\n}\nexports.getBooleanInput = getBooleanInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    const filePath = process.env['GITHUB_OUTPUT'] || '';\n    if (filePath) {\n        return file_command_1.issueFileCommand('OUTPUT', file_command_1.prepareKeyValueMessage(name, value));\n    }\n    process.stdout.write(os.EOL);\n    command_1.issueCommand('set-output', { name }, utils_1.toCommandValue(value));\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction error(message, properties = {}) {\n    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds a warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction warning(message, properties = {}) {\n    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Adds a notice issue\n * @param message notice issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction notice(message, properties = {}) {\n    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.notice = notice;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    const filePath = process.env['GITHUB_STATE'] || '';\n    if (filePath) {\n        return file_command_1.issueFileCommand('STATE', file_command_1.prepareKeyValueMessage(name, value));\n    }\n    command_1.issueCommand('save-state', { name }, utils_1.toCommandValue(value));\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\nfunction getIDToken(aud) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield oidc_utils_1.OidcClient.getIDToken(aud);\n    });\n}\nexports.getIDToken = getIDToken;\n/**\n * Summary exports\n */\nvar summary_1 = require(\"./summary\");\nObject.defineProperty(exports, \"summary\", { enumerable: true, get: function () { return summary_1.summary; } });\n/**\n * @deprecated use core.summary\n */\nvar summary_2 = require(\"./summary\");\nObject.defineProperty(exports, \"markdownSummary\", { enumerable: true, get: function () { return summary_2.markdownSummary; } });\n/**\n * Path exports\n */\nvar path_utils_1 = require(\"./path-utils\");\nObject.defineProperty(exports, \"toPosixPath\", { enumerable: true, get: function () { return path_utils_1.toPosixPath; } });\nObject.defineProperty(exports, \"toWin32Path\", { enumerable: true, get: function () { return path_utils_1.toWin32Path; } });\nObject.defineProperty(exports, \"toPlatformPath\", { enumerable: true, get: function () { return path_utils_1.toPlatformPath; } });\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.prepareKeyValueMessage = exports.issueFileCommand = void 0;\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst uuid_1 = require(\"uuid\");\nconst utils_1 = require(\"./utils\");\nfunction issueFileCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueFileCommand = issueFileCommand;\nfunction prepareKeyValueMessage(key, value) {\n    const delimiter = `ghadelimiter_${uuid_1.v4()}`;\n    const convertedValue = utils_1.toCommandValue(value);\n    // These should realistically never happen, but just in case someone finds a\n    // way to exploit uuid generation let's not allow keys or values that contain\n    // the delimiter.\n    if (key.includes(delimiter)) {\n        throw new Error(`Unexpected input: name should not contain the delimiter \"${delimiter}\"`);\n    }\n    if (convertedValue.includes(delimiter)) {\n        throw new Error(`Unexpected input: value should not contain the delimiter \"${delimiter}\"`);\n    }\n    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;\n}\nexports.prepareKeyValueMessage = prepareKeyValueMessage;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OidcClient = void 0;\nconst http_client_1 = require(\"@actions/http-client\");\nconst auth_1 = require(\"@actions/http-client/lib/auth\");\nconst core_1 = require(\"./core\");\nclass OidcClient {\n    static createHttpClient(allowRetry = true, maxRetry = 10) {\n        const requestOptions = {\n            allowRetries: allowRetry,\n            maxRetries: maxRetry\n        };\n        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);\n    }\n    static getRequestToken() {\n        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];\n        if (!token) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');\n        }\n        return token;\n    }\n    static getIDTokenUrl() {\n        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];\n        if (!runtimeUrl) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');\n        }\n        return runtimeUrl;\n    }\n    static getCall(id_token_url) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const httpclient = OidcClient.createHttpClient();\n            const res = yield httpclient\n                .getJson(id_token_url)\n                .catch(error => {\n                throw new Error(`Failed to get ID Token. \\n \n        Error Code : ${error.statusCode}\\n \n        Error Message: ${error.result.message}`);\n            });\n            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;\n            if (!id_token) {\n                throw new Error('Response json body do not have ID Token field');\n            }\n            return id_token;\n        });\n    }\n    static getIDToken(audience) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // New ID Token is requested from action service\n                let id_token_url = OidcClient.getIDTokenUrl();\n                if (audience) {\n                    const encodedAudience = encodeURIComponent(audience);\n                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;\n                }\n                core_1.debug(`ID token url is ${id_token_url}`);\n                const id_token = yield OidcClient.getCall(id_token_url);\n                core_1.setSecret(id_token);\n                return id_token;\n            }\n            catch (error) {\n                throw new Error(`Error message: ${error.message}`);\n            }\n        });\n    }\n}\nexports.OidcClient = OidcClient;\n//# sourceMappingURL=oidc-utils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;\nconst path = __importStar(require(\"path\"));\n/**\n * toPosixPath converts the given path to the posix form. On Windows, \\\\ will be\n * replaced with /.\n *\n * @param pth. Path to transform.\n * @return string Posix path.\n */\nfunction toPosixPath(pth) {\n    return pth.replace(/[\\\\]/g, '/');\n}\nexports.toPosixPath = toPosixPath;\n/**\n * toWin32Path converts the given path to the win32 form. On Linux, / will be\n * replaced with \\\\.\n *\n * @param pth. Path to transform.\n * @return string Win32 path.\n */\nfunction toWin32Path(pth) {\n    return pth.replace(/[/]/g, '\\\\');\n}\nexports.toWin32Path = toWin32Path;\n/**\n * toPlatformPath converts the given path to a platform-specific path. It does\n * this by replacing instances of / and \\ with the platform-specific path\n * separator.\n *\n * @param pth The path to platformize.\n * @return string The platform-specific path.\n */\nfunction toPlatformPath(pth) {\n    return pth.replace(/[/\\\\]/g, path.sep);\n}\nexports.toPlatformPath = toPlatformPath;\n//# sourceMappingURL=path-utils.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;\nconst os_1 = require(\"os\");\nconst fs_1 = require(\"fs\");\nconst { access, appendFile, writeFile } = fs_1.promises;\nexports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';\nexports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';\nclass Summary {\n    constructor() {\n        this._buffer = '';\n    }\n    /**\n     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist\n     * Also checks r/w permissions.\n     *\n     * @returns step summary file path\n     */\n    filePath() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._filePath) {\n                return this._filePath;\n            }\n            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];\n            if (!pathFromEnv) {\n                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);\n            }\n            try {\n                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);\n            }\n            catch (_a) {\n                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);\n            }\n            this._filePath = pathFromEnv;\n            return this._filePath;\n        });\n    }\n    /**\n     * Wraps content in an HTML tag, adding any HTML attributes\n     *\n     * @param {string} tag HTML tag to wrap\n     * @param {string | null} content content within the tag\n     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add\n     *\n     * @returns {string} content wrapped in HTML element\n     */\n    wrap(tag, content, attrs = {}) {\n        const htmlAttrs = Object.entries(attrs)\n            .map(([key, value]) => ` ${key}=\"${value}\"`)\n            .join('');\n        if (!content) {\n            return `<${tag}${htmlAttrs}>`;\n        }\n        return `<${tag}${htmlAttrs}>${content}</${tag}>`;\n    }\n    /**\n     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.\n     *\n     * @param {SummaryWriteOptions} [options] (optional) options for write operation\n     *\n     * @returns {Promise<Summary>} summary instance\n     */\n    write(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);\n            const filePath = yield this.filePath();\n            const writeFunc = overwrite ? writeFile : appendFile;\n            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });\n            return this.emptyBuffer();\n        });\n    }\n    /**\n     * Clears the summary buffer and wipes the summary file\n     *\n     * @returns {Summary} summary instance\n     */\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.emptyBuffer().write({ overwrite: true });\n        });\n    }\n    /**\n     * Returns the current summary buffer as a string\n     *\n     * @returns {string} string of summary buffer\n     */\n    stringify() {\n        return this._buffer;\n    }\n    /**\n     * If the summary buffer is empty\n     *\n     * @returns {boolen} true if the buffer is empty\n     */\n    isEmptyBuffer() {\n        return this._buffer.length === 0;\n    }\n    /**\n     * Resets the summary buffer without writing to summary file\n     *\n     * @returns {Summary} summary instance\n     */\n    emptyBuffer() {\n        this._buffer = '';\n        return this;\n    }\n    /**\n     * Adds raw text to the summary buffer\n     *\n     * @param {string} text content to add\n     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)\n     *\n     * @returns {Summary} summary instance\n     */\n    addRaw(text, addEOL = false) {\n        this._buffer += text;\n        return addEOL ? this.addEOL() : this;\n    }\n    /**\n     * Adds the operating system-specific end-of-line marker to the buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addEOL() {\n        return this.addRaw(os_1.EOL);\n    }\n    /**\n     * Adds an HTML codeblock to the summary buffer\n     *\n     * @param {string} code content to render within fenced code block\n     * @param {string} lang (optional) language to syntax highlight code\n     *\n     * @returns {Summary} summary instance\n     */\n    addCodeBlock(code, lang) {\n        const attrs = Object.assign({}, (lang && { lang }));\n        const element = this.wrap('pre', this.wrap('code', code), attrs);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML list to the summary buffer\n     *\n     * @param {string[]} items list of items to render\n     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)\n     *\n     * @returns {Summary} summary instance\n     */\n    addList(items, ordered = false) {\n        const tag = ordered ? 'ol' : 'ul';\n        const listItems = items.map(item => this.wrap('li', item)).join('');\n        const element = this.wrap(tag, listItems);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML table to the summary buffer\n     *\n     * @param {SummaryTableCell[]} rows table rows\n     *\n     * @returns {Summary} summary instance\n     */\n    addTable(rows) {\n        const tableBody = rows\n            .map(row => {\n            const cells = row\n                .map(cell => {\n                if (typeof cell === 'string') {\n                    return this.wrap('td', cell);\n                }\n                const { header, data, colspan, rowspan } = cell;\n                const tag = header ? 'th' : 'td';\n                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));\n                return this.wrap(tag, data, attrs);\n            })\n                .join('');\n            return this.wrap('tr', cells);\n        })\n            .join('');\n        const element = this.wrap('table', tableBody);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds a collapsable HTML details element to the summary buffer\n     *\n     * @param {string} label text for the closed state\n     * @param {string} content collapsable content\n     *\n     * @returns {Summary} summary instance\n     */\n    addDetails(label, content) {\n        const element = this.wrap('details', this.wrap('summary', label) + content);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML image tag to the summary buffer\n     *\n     * @param {string} src path to the image you to embed\n     * @param {string} alt text description of the image\n     * @param {SummaryImageOptions} options (optional) addition image attributes\n     *\n     * @returns {Summary} summary instance\n     */\n    addImage(src, alt, options) {\n        const { width, height } = options || {};\n        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));\n        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML section heading element\n     *\n     * @param {string} text heading text\n     * @param {number | string} [level=1] (optional) the heading level, default: 1\n     *\n     * @returns {Summary} summary instance\n     */\n    addHeading(text, level) {\n        const tag = `h${level}`;\n        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)\n            ? tag\n            : 'h1';\n        const element = this.wrap(allowedTag, text);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML thematic break (<hr>) to the summary buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addSeparator() {\n        const element = this.wrap('hr', null);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML line break (<br>) to the summary buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addBreak() {\n        const element = this.wrap('br', null);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML blockquote to the summary buffer\n     *\n     * @param {string} text quote text\n     * @param {string} cite (optional) citation url\n     *\n     * @returns {Summary} summary instance\n     */\n    addQuote(text, cite) {\n        const attrs = Object.assign({}, (cite && { cite }));\n        const element = this.wrap('blockquote', text, attrs);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML anchor tag to the summary buffer\n     *\n     * @param {string} text link text/content\n     * @param {string} href hyperlink\n     *\n     * @returns {Summary} summary instance\n     */\n    addLink(text, href) {\n        const element = this.wrap('a', text, { href });\n        return this.addRaw(element).addEOL();\n    }\n}\nconst _summary = new Summary();\n/**\n * @deprecated use `core.summary`\n */\nexports.markdownSummary = _summary;\nexports.summary = _summary;\n//# sourceMappingURL=summary.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCommandProperties = exports.toCommandValue = void 0;\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n/**\n *\n * @param annotationProperties\n * @returns The command properties to send with the actual annotation command\n * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646\n */\nfunction toCommandProperties(annotationProperties) {\n    if (!Object.keys(annotationProperties).length) {\n        return {};\n    }\n    return {\n        title: annotationProperties.title,\n        file: annotationProperties.file,\n        line: annotationProperties.startLine,\n        endLine: annotationProperties.endLine,\n        col: annotationProperties.startColumn,\n        endColumn: annotationProperties.endColumn\n    };\n}\nexports.toCommandProperties = toCommandProperties;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;\nclass BasicCredentialHandler {\n    constructor(username, password) {\n        this.username = username;\n        this.password = password;\n    }\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.BasicCredentialHandler = BasicCredentialHandler;\nclass BearerCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.BearerCredentialHandler = BearerCredentialHandler;\nclass PersonalAccessTokenCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;\n//# sourceMappingURL=auth.js.map","\"use strict\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;\nconst http = __importStar(require(\"http\"));\nconst https = __importStar(require(\"https\"));\nconst pm = __importStar(require(\"./proxy\"));\nconst tunnel = __importStar(require(\"tunnel\"));\nvar HttpCodes;\n(function (HttpCodes) {\n    HttpCodes[HttpCodes[\"OK\"] = 200] = \"OK\";\n    HttpCodes[HttpCodes[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n    HttpCodes[HttpCodes[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n    HttpCodes[HttpCodes[\"ResourceMoved\"] = 302] = \"ResourceMoved\";\n    HttpCodes[HttpCodes[\"SeeOther\"] = 303] = \"SeeOther\";\n    HttpCodes[HttpCodes[\"NotModified\"] = 304] = \"NotModified\";\n    HttpCodes[HttpCodes[\"UseProxy\"] = 305] = \"UseProxy\";\n    HttpCodes[HttpCodes[\"SwitchProxy\"] = 306] = \"SwitchProxy\";\n    HttpCodes[HttpCodes[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n    HttpCodes[HttpCodes[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n    HttpCodes[HttpCodes[\"BadRequest\"] = 400] = \"BadRequest\";\n    HttpCodes[HttpCodes[\"Unauthorized\"] = 401] = \"Unauthorized\";\n    HttpCodes[HttpCodes[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n    HttpCodes[HttpCodes[\"Forbidden\"] = 403] = \"Forbidden\";\n    HttpCodes[HttpCodes[\"NotFound\"] = 404] = \"NotFound\";\n    HttpCodes[HttpCodes[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n    HttpCodes[HttpCodes[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n    HttpCodes[HttpCodes[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n    HttpCodes[HttpCodes[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n    HttpCodes[HttpCodes[\"Conflict\"] = 409] = \"Conflict\";\n    HttpCodes[HttpCodes[\"Gone\"] = 410] = \"Gone\";\n    HttpCodes[HttpCodes[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n    HttpCodes[HttpCodes[\"InternalServerError\"] = 500] = \"InternalServerError\";\n    HttpCodes[HttpCodes[\"NotImplemented\"] = 501] = \"NotImplemented\";\n    HttpCodes[HttpCodes[\"BadGateway\"] = 502] = \"BadGateway\";\n    HttpCodes[HttpCodes[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n    HttpCodes[HttpCodes[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));\nvar Headers;\n(function (Headers) {\n    Headers[\"Accept\"] = \"accept\";\n    Headers[\"ContentType\"] = \"content-type\";\n})(Headers = exports.Headers || (exports.Headers = {}));\nvar MediaTypes;\n(function (MediaTypes) {\n    MediaTypes[\"ApplicationJson\"] = \"application/json\";\n})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));\n/**\n * Returns the proxy URL, depending upon the supplied url and proxy environment variables.\n * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n */\nfunction getProxyUrl(serverUrl) {\n    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));\n    return proxyUrl ? proxyUrl.href : '';\n}\nexports.getProxyUrl = getProxyUrl;\nconst HttpRedirectCodes = [\n    HttpCodes.MovedPermanently,\n    HttpCodes.ResourceMoved,\n    HttpCodes.SeeOther,\n    HttpCodes.TemporaryRedirect,\n    HttpCodes.PermanentRedirect\n];\nconst HttpResponseRetryCodes = [\n    HttpCodes.BadGateway,\n    HttpCodes.ServiceUnavailable,\n    HttpCodes.GatewayTimeout\n];\nconst RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];\nconst ExponentialBackoffCeiling = 10;\nconst ExponentialBackoffTimeSlice = 5;\nclass HttpClientError extends Error {\n    constructor(message, statusCode) {\n        super(message);\n        this.name = 'HttpClientError';\n        this.statusCode = statusCode;\n        Object.setPrototypeOf(this, HttpClientError.prototype);\n    }\n}\nexports.HttpClientError = HttpClientError;\nclass HttpClientResponse {\n    constructor(message) {\n        this.message = message;\n    }\n    readBody() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n                let output = Buffer.alloc(0);\n                this.message.on('data', (chunk) => {\n                    output = Buffer.concat([output, chunk]);\n                });\n                this.message.on('end', () => {\n                    resolve(output.toString());\n                });\n            }));\n        });\n    }\n}\nexports.HttpClientResponse = HttpClientResponse;\nfunction isHttps(requestUrl) {\n    const parsedUrl = new URL(requestUrl);\n    return parsedUrl.protocol === 'https:';\n}\nexports.isHttps = isHttps;\nclass HttpClient {\n    constructor(userAgent, handlers, requestOptions) {\n        this._ignoreSslError = false;\n        this._allowRedirects = true;\n        this._allowRedirectDowngrade = false;\n        this._maxRedirects = 50;\n        this._allowRetries = false;\n        this._maxRetries = 1;\n        this._keepAlive = false;\n        this._disposed = false;\n        this.userAgent = userAgent;\n        this.handlers = handlers || [];\n        this.requestOptions = requestOptions;\n        if (requestOptions) {\n            if (requestOptions.ignoreSslError != null) {\n                this._ignoreSslError = requestOptions.ignoreSslError;\n            }\n            this._socketTimeout = requestOptions.socketTimeout;\n            if (requestOptions.allowRedirects != null) {\n                this._allowRedirects = requestOptions.allowRedirects;\n            }\n            if (requestOptions.allowRedirectDowngrade != null) {\n                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;\n            }\n            if (requestOptions.maxRedirects != null) {\n                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);\n            }\n            if (requestOptions.keepAlive != null) {\n                this._keepAlive = requestOptions.keepAlive;\n            }\n            if (requestOptions.allowRetries != null) {\n                this._allowRetries = requestOptions.allowRetries;\n            }\n            if (requestOptions.maxRetries != null) {\n                this._maxRetries = requestOptions.maxRetries;\n            }\n        }\n    }\n    options(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    get(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('GET', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    del(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('DELETE', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    post(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('POST', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    patch(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('PATCH', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    put(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('PUT', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    head(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('HEAD', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    sendStream(verb, requestUrl, stream, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request(verb, requestUrl, stream, additionalHeaders);\n        });\n    }\n    /**\n     * Gets a typed object from an endpoint\n     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise\n     */\n    getJson(requestUrl, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            const res = yield this.get(requestUrl, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    postJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.post(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    putJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.put(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    patchJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.patch(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    /**\n     * Makes a raw http request.\n     * All other methods such as get, post, patch, and request ultimately call this.\n     * Prefer get, del, post and patch\n     */\n    request(verb, requestUrl, data, headers) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._disposed) {\n                throw new Error('Client has already been disposed.');\n            }\n            const parsedUrl = new URL(requestUrl);\n            let info = this._prepareRequest(verb, parsedUrl, headers);\n            // Only perform retries on reads since writes may not be idempotent.\n            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)\n                ? this._maxRetries + 1\n                : 1;\n            let numTries = 0;\n            let response;\n            do {\n                response = yield this.requestRaw(info, data);\n                // Check if it's an authentication challenge\n                if (response &&\n                    response.message &&\n                    response.message.statusCode === HttpCodes.Unauthorized) {\n                    let authenticationHandler;\n                    for (const handler of this.handlers) {\n                        if (handler.canHandleAuthentication(response)) {\n                            authenticationHandler = handler;\n                            break;\n                        }\n                    }\n                    if (authenticationHandler) {\n                        return authenticationHandler.handleAuthentication(this, info, data);\n                    }\n                    else {\n                        // We have received an unauthorized response but have no handlers to handle it.\n                        // Let the response return to the caller.\n                        return response;\n                    }\n                }\n                let redirectsRemaining = this._maxRedirects;\n                while (response.message.statusCode &&\n                    HttpRedirectCodes.includes(response.message.statusCode) &&\n                    this._allowRedirects &&\n                    redirectsRemaining > 0) {\n                    const redirectUrl = response.message.headers['location'];\n                    if (!redirectUrl) {\n                        // if there's no location to redirect to, we won't\n                        break;\n                    }\n                    const parsedRedirectUrl = new URL(redirectUrl);\n                    if (parsedUrl.protocol === 'https:' &&\n                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&\n                        !this._allowRedirectDowngrade) {\n                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');\n                    }\n                    // we need to finish reading the response before reassigning response\n                    // which will leak the open socket.\n                    yield response.readBody();\n                    // strip authorization header if redirected to a different hostname\n                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {\n                        for (const header in headers) {\n                            // header names are case insensitive\n                            if (header.toLowerCase() === 'authorization') {\n                                delete headers[header];\n                            }\n                        }\n                    }\n                    // let's make the request with the new redirectUrl\n                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);\n                    response = yield this.requestRaw(info, data);\n                    redirectsRemaining--;\n                }\n                if (!response.message.statusCode ||\n                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {\n                    // If not a retry code, return immediately instead of retrying\n                    return response;\n                }\n                numTries += 1;\n                if (numTries < maxTries) {\n                    yield response.readBody();\n                    yield this._performExponentialBackoff(numTries);\n                }\n            } while (numTries < maxTries);\n            return response;\n        });\n    }\n    /**\n     * Needs to be called if keepAlive is set to true in request options.\n     */\n    dispose() {\n        if (this._agent) {\n            this._agent.destroy();\n        }\n        this._disposed = true;\n    }\n    /**\n     * Raw request.\n     * @param info\n     * @param data\n     */\n    requestRaw(info, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                function callbackForResult(err, res) {\n                    if (err) {\n                        reject(err);\n                    }\n                    else if (!res) {\n                        // If `err` is not passed, then `res` must be passed.\n                        reject(new Error('Unknown error'));\n                    }\n                    else {\n                        resolve(res);\n                    }\n                }\n                this.requestRawWithCallback(info, data, callbackForResult);\n            });\n        });\n    }\n    /**\n     * Raw request with callback.\n     * @param info\n     * @param data\n     * @param onResult\n     */\n    requestRawWithCallback(info, data, onResult) {\n        if (typeof data === 'string') {\n            if (!info.options.headers) {\n                info.options.headers = {};\n            }\n            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n        }\n        let callbackCalled = false;\n        function handleResult(err, res) {\n            if (!callbackCalled) {\n                callbackCalled = true;\n                onResult(err, res);\n            }\n        }\n        const req = info.httpModule.request(info.options, (msg) => {\n            const res = new HttpClientResponse(msg);\n            handleResult(undefined, res);\n        });\n        let socket;\n        req.on('socket', sock => {\n            socket = sock;\n        });\n        // If we ever get disconnected, we want the socket to timeout eventually\n        req.setTimeout(this._socketTimeout || 3 * 60000, () => {\n            if (socket) {\n                socket.end();\n            }\n            handleResult(new Error(`Request timeout: ${info.options.path}`));\n        });\n        req.on('error', function (err) {\n            // err has statusCode property\n            // res should have headers\n            handleResult(err);\n        });\n        if (data && typeof data === 'string') {\n            req.write(data, 'utf8');\n        }\n        if (data && typeof data !== 'string') {\n            data.on('close', function () {\n                req.end();\n            });\n            data.pipe(req);\n        }\n        else {\n            req.end();\n        }\n    }\n    /**\n     * Gets an http agent. This function is useful when you need an http agent that handles\n     * routing through a proxy server - depending upon the url and proxy environment variables.\n     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n     */\n    getAgent(serverUrl) {\n        const parsedUrl = new URL(serverUrl);\n        return this._getAgent(parsedUrl);\n    }\n    _prepareRequest(method, requestUrl, headers) {\n        const info = {};\n        info.parsedUrl = requestUrl;\n        const usingSsl = info.parsedUrl.protocol === 'https:';\n        info.httpModule = usingSsl ? https : http;\n        const defaultPort = usingSsl ? 443 : 80;\n        info.options = {};\n        info.options.host = info.parsedUrl.hostname;\n        info.options.port = info.parsedUrl.port\n            ? parseInt(info.parsedUrl.port)\n            : defaultPort;\n        info.options.path =\n            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');\n        info.options.method = method;\n        info.options.headers = this._mergeHeaders(headers);\n        if (this.userAgent != null) {\n            info.options.headers['user-agent'] = this.userAgent;\n        }\n        info.options.agent = this._getAgent(info.parsedUrl);\n        // gives handlers an opportunity to participate\n        if (this.handlers) {\n            for (const handler of this.handlers) {\n                handler.prepareRequest(info.options);\n            }\n        }\n        return info;\n    }\n    _mergeHeaders(headers) {\n        if (this.requestOptions && this.requestOptions.headers) {\n            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));\n        }\n        return lowercaseKeys(headers || {});\n    }\n    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {\n        let clientHeader;\n        if (this.requestOptions && this.requestOptions.headers) {\n            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];\n        }\n        return additionalHeaders[header] || clientHeader || _default;\n    }\n    _getAgent(parsedUrl) {\n        let agent;\n        const proxyUrl = pm.getProxyUrl(parsedUrl);\n        const useProxy = proxyUrl && proxyUrl.hostname;\n        if (this._keepAlive && useProxy) {\n            agent = this._proxyAgent;\n        }\n        if (this._keepAlive && !useProxy) {\n            agent = this._agent;\n        }\n        // if agent is already assigned use that agent.\n        if (agent) {\n            return agent;\n        }\n        const usingSsl = parsedUrl.protocol === 'https:';\n        let maxSockets = 100;\n        if (this.requestOptions) {\n            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;\n        }\n        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.\n        if (proxyUrl && proxyUrl.hostname) {\n            const agentOptions = {\n                maxSockets,\n                keepAlive: this._keepAlive,\n                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {\n                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`\n                })), { host: proxyUrl.hostname, port: proxyUrl.port })\n            };\n            let tunnelAgent;\n            const overHttps = proxyUrl.protocol === 'https:';\n            if (usingSsl) {\n                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;\n            }\n            else {\n                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;\n            }\n            agent = tunnelAgent(agentOptions);\n            this._proxyAgent = agent;\n        }\n        // if reusing agent across request and tunneling agent isn't assigned create a new agent\n        if (this._keepAlive && !agent) {\n            const options = { keepAlive: this._keepAlive, maxSockets };\n            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);\n            this._agent = agent;\n        }\n        // if not using private agent and tunnel agent isn't setup then use global agent\n        if (!agent) {\n            agent = usingSsl ? https.globalAgent : http.globalAgent;\n        }\n        if (usingSsl && this._ignoreSslError) {\n            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process\n            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options\n            // we have to cast it to any and change it directly\n            agent.options = Object.assign(agent.options || {}, {\n                rejectUnauthorized: false\n            });\n        }\n        return agent;\n    }\n    _performExponentialBackoff(retryNumber) {\n        return __awaiter(this, void 0, void 0, function* () {\n            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);\n            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);\n            return new Promise(resolve => setTimeout(() => resolve(), ms));\n        });\n    }\n    _processResponse(res, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                const statusCode = res.message.statusCode || 0;\n                const response = {\n                    statusCode,\n                    result: null,\n                    headers: {}\n                };\n                // not found leads to null obj returned\n                if (statusCode === HttpCodes.NotFound) {\n                    resolve(response);\n                }\n                // get the result from the body\n                function dateTimeDeserializer(key, value) {\n                    if (typeof value === 'string') {\n                        const a = new Date(value);\n                        if (!isNaN(a.valueOf())) {\n                            return a;\n                        }\n                    }\n                    return value;\n                }\n                let obj;\n                let contents;\n                try {\n                    contents = yield res.readBody();\n                    if (contents && contents.length > 0) {\n                        if (options && options.deserializeDates) {\n                            obj = JSON.parse(contents, dateTimeDeserializer);\n                        }\n                        else {\n                            obj = JSON.parse(contents);\n                        }\n                        response.result = obj;\n                    }\n                    response.headers = res.message.headers;\n                }\n                catch (err) {\n                    // Invalid resource (contents not json);  leaving result obj null\n                }\n                // note that 3xx redirects are handled by the http layer.\n                if (statusCode > 299) {\n                    let msg;\n                    // if exception/error in body, attempt to get better error\n                    if (obj && obj.message) {\n                        msg = obj.message;\n                    }\n                    else if (contents && contents.length > 0) {\n                        // it may be the case that the exception is in the body message as string\n                        msg = contents;\n                    }\n                    else {\n                        msg = `Failed request: (${statusCode})`;\n                    }\n                    const err = new HttpClientError(msg, statusCode);\n                    err.result = response.result;\n                    reject(err);\n                }\n                else {\n                    resolve(response);\n                }\n            }));\n        });\n    }\n}\nexports.HttpClient = HttpClient;\nconst lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkBypass = exports.getProxyUrl = void 0;\nfunction getProxyUrl(reqUrl) {\n    const usingSsl = reqUrl.protocol === 'https:';\n    if (checkBypass(reqUrl)) {\n        return undefined;\n    }\n    const proxyVar = (() => {\n        if (usingSsl) {\n            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];\n        }\n        else {\n            return process.env['http_proxy'] || process.env['HTTP_PROXY'];\n        }\n    })();\n    if (proxyVar) {\n        return new URL(proxyVar);\n    }\n    else {\n        return undefined;\n    }\n}\nexports.getProxyUrl = getProxyUrl;\nfunction checkBypass(reqUrl) {\n    if (!reqUrl.hostname) {\n        return false;\n    }\n    const reqHost = reqUrl.hostname;\n    if (isLoopbackAddress(reqHost)) {\n        return true;\n    }\n    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';\n    if (!noProxy) {\n        return false;\n    }\n    // Determine the request port\n    let reqPort;\n    if (reqUrl.port) {\n        reqPort = Number(reqUrl.port);\n    }\n    else if (reqUrl.protocol === 'http:') {\n        reqPort = 80;\n    }\n    else if (reqUrl.protocol === 'https:') {\n        reqPort = 443;\n    }\n    // Format the request hostname and hostname with port\n    const upperReqHosts = [reqUrl.hostname.toUpperCase()];\n    if (typeof reqPort === 'number') {\n        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);\n    }\n    // Compare request host against noproxy\n    for (const upperNoProxyItem of noProxy\n        .split(',')\n        .map(x => x.trim().toUpperCase())\n        .filter(x => x)) {\n        if (upperNoProxyItem === '*' ||\n            upperReqHosts.some(x => x === upperNoProxyItem ||\n                x.endsWith(`.${upperNoProxyItem}`) ||\n                (upperNoProxyItem.startsWith('.') &&\n                    x.endsWith(`${upperNoProxyItem}`)))) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.checkBypass = checkBypass;\nfunction isLoopbackAddress(host) {\n    const hostLower = host.toLowerCase();\n    return (hostLower === 'localhost' ||\n        hostLower.startsWith('127.') ||\n        hostLower.startsWith('[::1]') ||\n        hostLower.startsWith('[0:0:0:0:0:0:0:1]'));\n}\n//# sourceMappingURL=proxy.js.map","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Api: () => Api,\n  ContentType: () => ContentType,\n  HttpClient: () => HttpClient,\n  giteaApi: () => giteaApi\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/api.ts\nvar ContentType = /* @__PURE__ */ ((ContentType2) => {\n  ContentType2[\"Json\"] = \"application/json\";\n  ContentType2[\"FormData\"] = \"multipart/form-data\";\n  ContentType2[\"UrlEncoded\"] = \"application/x-www-form-urlencoded\";\n  ContentType2[\"Text\"] = \"text/plain\";\n  return ContentType2;\n})(ContentType || {});\nvar HttpClient = class {\n  constructor(apiConfig = {}) {\n    this.baseUrl = \"/api/v1\";\n    this.securityData = null;\n    this.abortControllers = /* @__PURE__ */ new Map();\n    this.customFetch = (...fetchParams) => fetch(...fetchParams);\n    this.baseApiParams = {\n      credentials: \"same-origin\",\n      headers: {},\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\"\n    };\n    this.setSecurityData = (data) => {\n      this.securityData = data;\n    };\n    this.contentFormatters = {\n      [\"application/json\" /* Json */]: (input) => input !== null && (typeof input === \"object\" || typeof input === \"string\") ? JSON.stringify(input) : input,\n      [\"text/plain\" /* Text */]: (input) => input !== null && typeof input !== \"string\" ? JSON.stringify(input) : input,\n      [\"multipart/form-data\" /* FormData */]: (input) => Object.keys(input || {}).reduce((formData, key) => {\n        const property = input[key];\n        formData.append(\n          key,\n          property instanceof Blob ? property : typeof property === \"object\" && property !== null ? JSON.stringify(property) : `${property}`\n        );\n        return formData;\n      }, new FormData()),\n      [\"application/x-www-form-urlencoded\" /* UrlEncoded */]: (input) => this.toQueryString(input)\n    };\n    this.createAbortSignal = (cancelToken) => {\n      if (this.abortControllers.has(cancelToken)) {\n        const abortController2 = this.abortControllers.get(cancelToken);\n        if (abortController2) {\n          return abortController2.signal;\n        }\n        return void 0;\n      }\n      const abortController = new AbortController();\n      this.abortControllers.set(cancelToken, abortController);\n      return abortController.signal;\n    };\n    this.abortRequest = (cancelToken) => {\n      const abortController = this.abortControllers.get(cancelToken);\n      if (abortController) {\n        abortController.abort();\n        this.abortControllers.delete(cancelToken);\n      }\n    };\n    this.request = async (_a) => {\n      var _b = _a, {\n        body,\n        secure,\n        path,\n        type,\n        query,\n        format,\n        baseUrl,\n        cancelToken\n      } = _b, params = __objRest(_b, [\n        \"body\",\n        \"secure\",\n        \"path\",\n        \"type\",\n        \"query\",\n        \"format\",\n        \"baseUrl\",\n        \"cancelToken\"\n      ]);\n      const secureParams = (typeof secure === \"boolean\" ? secure : this.baseApiParams.secure) && this.securityWorker && await this.securityWorker(this.securityData) || {};\n      const requestParams = this.mergeRequestParams(params, secureParams);\n      const queryString = query && this.toQueryString(query);\n      const payloadFormatter = this.contentFormatters[type || \"application/json\" /* Json */];\n      const responseFormat = format || requestParams.format;\n      return this.customFetch(`${baseUrl || this.baseUrl || \"\"}${path}${queryString ? `?${queryString}` : \"\"}`, __spreadProps(__spreadValues({}, requestParams), {\n        headers: __spreadValues(__spreadValues({}, requestParams.headers || {}), type && type !== \"multipart/form-data\" /* FormData */ ? { \"Content-Type\": type } : {}),\n        signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,\n        body: typeof body === \"undefined\" || body === null ? null : payloadFormatter(body)\n      })).then(async (response) => {\n        const r = response;\n        r.data = null;\n        r.error = null;\n        const data = !responseFormat ? r : await response[responseFormat]().then((data2) => {\n          if (r.ok) {\n            r.data = data2;\n          } else {\n            r.error = data2;\n          }\n          return r;\n        }).catch((e) => {\n          r.error = e;\n          return r;\n        });\n        if (cancelToken) {\n          this.abortControllers.delete(cancelToken);\n        }\n        if (!response.ok)\n          throw data;\n        return data;\n      });\n    };\n    Object.assign(this, apiConfig);\n  }\n  encodeQueryParam(key, value) {\n    const encodedKey = encodeURIComponent(key);\n    return `${encodedKey}=${encodeURIComponent(typeof value === \"number\" ? value : `${value}`)}`;\n  }\n  addQueryParam(query, key) {\n    return this.encodeQueryParam(key, query[key]);\n  }\n  addArrayQueryParam(query, key) {\n    const value = query[key];\n    return value.map((v) => this.encodeQueryParam(key, v)).join(\"&\");\n  }\n  toQueryString(rawQuery) {\n    const query = rawQuery || {};\n    const keys = Object.keys(query).filter((key) => \"undefined\" !== typeof query[key]);\n    return keys.map((key) => Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)).join(\"&\");\n  }\n  addQueryParams(rawQuery) {\n    const queryString = this.toQueryString(rawQuery);\n    return queryString ? `?${queryString}` : \"\";\n  }\n  mergeRequestParams(params1, params2) {\n    return __spreadProps(__spreadValues(__spreadValues(__spreadValues({}, this.baseApiParams), params1), params2 || {}), {\n      headers: __spreadValues(__spreadValues(__spreadValues({}, this.baseApiParams.headers || {}), params1.headers || {}), params2 && params2.headers || {})\n    });\n  }\n};\nvar Api = class extends HttpClient {\n  constructor() {\n    super(...arguments);\n    this.activitypub = {\n      /**\n       * No description\n       *\n       * @tags activitypub\n       * @name ActivitypubPerson\n       * @summary Returns the Person actor for a user\n       * @request GET:/activitypub/user-id/{user-id}\n       * @secure\n       */\n      activitypubPerson: (userId, params = {}) => this.request(__spreadValues({\n        path: `/activitypub/user-id/${userId}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags activitypub\n       * @name ActivitypubPersonInbox\n       * @summary Send to the inbox\n       * @request POST:/activitypub/user-id/{user-id}/inbox\n       * @secure\n       */\n      activitypubPersonInbox: (userId, params = {}) => this.request(__spreadValues({\n        path: `/activitypub/user-id/${userId}/inbox`,\n        method: \"POST\",\n        secure: true\n      }, params))\n    };\n    this.admin = {\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminCronList\n       * @summary List cron tasks\n       * @request GET:/admin/cron\n       * @secure\n       */\n      adminCronList: (query, params = {}) => this.request(__spreadValues({\n        path: `/admin/cron`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminCronRun\n       * @summary Run cron task\n       * @request POST:/admin/cron/{task}\n       * @secure\n       */\n      adminCronRun: (task, params = {}) => this.request(__spreadValues({\n        path: `/admin/cron/${task}`,\n        method: \"POST\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminGetAllEmails\n       * @summary List all emails\n       * @request GET:/admin/emails\n       * @secure\n       */\n      adminGetAllEmails: (query, params = {}) => this.request(__spreadValues({\n        path: `/admin/emails`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminSearchEmails\n       * @summary Search all emails\n       * @request GET:/admin/emails/search\n       * @secure\n       */\n      adminSearchEmails: (query, params = {}) => this.request(__spreadValues({\n        path: `/admin/emails/search`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminListHooks\n       * @summary List system's webhooks\n       * @request GET:/admin/hooks\n       * @secure\n       */\n      adminListHooks: (query, params = {}) => this.request(__spreadValues({\n        path: `/admin/hooks`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminCreateHook\n       * @summary Create a hook\n       * @request POST:/admin/hooks\n       * @secure\n       */\n      adminCreateHook: (body, params = {}) => this.request(__spreadValues({\n        path: `/admin/hooks`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminGetHook\n       * @summary Get a hook\n       * @request GET:/admin/hooks/{id}\n       * @secure\n       */\n      adminGetHook: (id, params = {}) => this.request(__spreadValues({\n        path: `/admin/hooks/${id}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminDeleteHook\n       * @summary Delete a hook\n       * @request DELETE:/admin/hooks/{id}\n       * @secure\n       */\n      adminDeleteHook: (id, params = {}) => this.request(__spreadValues({\n        path: `/admin/hooks/${id}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminEditHook\n       * @summary Update a hook\n       * @request PATCH:/admin/hooks/{id}\n       * @secure\n       */\n      adminEditHook: (id, body, params = {}) => this.request(__spreadValues({\n        path: `/admin/hooks/${id}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminGetAllOrgs\n       * @summary List all organizations\n       * @request GET:/admin/orgs\n       * @secure\n       */\n      adminGetAllOrgs: (query, params = {}) => this.request(__spreadValues({\n        path: `/admin/orgs`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminGetRunnerRegistrationToken\n       * @summary Get an global actions runner registration token\n       * @request GET:/admin/runners/registration-token\n       * @secure\n       */\n      adminGetRunnerRegistrationToken: (params = {}) => this.request(__spreadValues({\n        path: `/admin/runners/registration-token`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminUnadoptedList\n       * @summary List unadopted repositories\n       * @request GET:/admin/unadopted\n       * @secure\n       */\n      adminUnadoptedList: (query, params = {}) => this.request(__spreadValues({\n        path: `/admin/unadopted`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminAdoptRepository\n       * @summary Adopt unadopted files as a repository\n       * @request POST:/admin/unadopted/{owner}/{repo}\n       * @secure\n       */\n      adminAdoptRepository: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/admin/unadopted/${owner}/${repo}`,\n        method: \"POST\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminDeleteUnadoptedRepository\n       * @summary Delete unadopted files\n       * @request DELETE:/admin/unadopted/{owner}/{repo}\n       * @secure\n       */\n      adminDeleteUnadoptedRepository: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/admin/unadopted/${owner}/${repo}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminSearchUsers\n       * @summary Search users according filter conditions\n       * @request GET:/admin/users\n       * @secure\n       */\n      adminSearchUsers: (query, params = {}) => this.request(__spreadValues({\n        path: `/admin/users`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminCreateUser\n       * @summary Create a user\n       * @request POST:/admin/users\n       * @secure\n       */\n      adminCreateUser: (body, params = {}) => this.request(__spreadValues({\n        path: `/admin/users`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminDeleteUser\n       * @summary Delete a user\n       * @request DELETE:/admin/users/{username}\n       * @secure\n       */\n      adminDeleteUser: (username, query, params = {}) => this.request(__spreadValues({\n        path: `/admin/users/${username}`,\n        method: \"DELETE\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminEditUser\n       * @summary Edit an existing user\n       * @request PATCH:/admin/users/{username}\n       * @secure\n       */\n      adminEditUser: (username, body, params = {}) => this.request(__spreadValues({\n        path: `/admin/users/${username}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminListUserBadges\n       * @summary List a user's badges\n       * @request GET:/admin/users/{username}/badges\n       * @secure\n       */\n      adminListUserBadges: (username, params = {}) => this.request(__spreadValues({\n        path: `/admin/users/${username}/badges`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminAddUserBadges\n       * @summary Add a badge to a user\n       * @request POST:/admin/users/{username}/badges\n       * @secure\n       */\n      adminAddUserBadges: (username, body, params = {}) => this.request(__spreadValues({\n        path: `/admin/users/${username}/badges`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminDeleteUserBadges\n       * @summary Remove a badge from a user\n       * @request DELETE:/admin/users/{username}/badges\n       * @secure\n       */\n      adminDeleteUserBadges: (username, body, params = {}) => this.request(__spreadValues({\n        path: `/admin/users/${username}/badges`,\n        method: \"DELETE\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminCreatePublicKey\n       * @summary Add a public key on behalf of a user\n       * @request POST:/admin/users/{username}/keys\n       * @secure\n       */\n      adminCreatePublicKey: (username, key, params = {}) => this.request(__spreadValues({\n        path: `/admin/users/${username}/keys`,\n        method: \"POST\",\n        body: key,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminDeleteUserPublicKey\n       * @summary Delete a user's public key\n       * @request DELETE:/admin/users/{username}/keys/{id}\n       * @secure\n       */\n      adminDeleteUserPublicKey: (username, id, params = {}) => this.request(__spreadValues({\n        path: `/admin/users/${username}/keys/${id}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminCreateOrg\n       * @summary Create an organization\n       * @request POST:/admin/users/{username}/orgs\n       * @secure\n       */\n      adminCreateOrg: (username, organization, params = {}) => this.request(__spreadValues({\n        path: `/admin/users/${username}/orgs`,\n        method: \"POST\",\n        body: organization,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminRenameUser\n       * @summary Rename a user\n       * @request POST:/admin/users/{username}/rename\n       * @secure\n       */\n      adminRenameUser: (username, body, params = {}) => this.request(__spreadValues({\n        path: `/admin/users/${username}/rename`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags admin\n       * @name AdminCreateRepo\n       * @summary Create a repository on behalf of a user\n       * @request POST:/admin/users/{username}/repos\n       * @secure\n       */\n      adminCreateRepo: (username, repository, params = {}) => this.request(__spreadValues({\n        path: `/admin/users/${username}/repos`,\n        method: \"POST\",\n        body: repository,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params))\n    };\n    this.gitignore = {\n      /**\n       * No description\n       *\n       * @tags miscellaneous\n       * @name ListGitignoresTemplates\n       * @summary Returns a list of all gitignore templates\n       * @request GET:/gitignore/templates\n       * @secure\n       */\n      listGitignoresTemplates: (params = {}) => this.request(__spreadValues({\n        path: `/gitignore/templates`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags miscellaneous\n       * @name GetGitignoreTemplateInfo\n       * @summary Returns information about a gitignore template\n       * @request GET:/gitignore/templates/{name}\n       * @secure\n       */\n      getGitignoreTemplateInfo: (name, params = {}) => this.request(__spreadValues({\n        path: `/gitignore/templates/${name}`,\n        method: \"GET\",\n        secure: true\n      }, params))\n    };\n    this.label = {\n      /**\n       * No description\n       *\n       * @tags miscellaneous\n       * @name ListLabelTemplates\n       * @summary Returns a list of all label templates\n       * @request GET:/label/templates\n       * @secure\n       */\n      listLabelTemplates: (params = {}) => this.request(__spreadValues({\n        path: `/label/templates`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags miscellaneous\n       * @name GetLabelTemplateInfo\n       * @summary Returns all labels in a template\n       * @request GET:/label/templates/{name}\n       * @secure\n       */\n      getLabelTemplateInfo: (name, params = {}) => this.request(__spreadValues({\n        path: `/label/templates/${name}`,\n        method: \"GET\",\n        secure: true\n      }, params))\n    };\n    this.licenses = {\n      /**\n       * No description\n       *\n       * @tags miscellaneous\n       * @name ListLicenseTemplates\n       * @summary Returns a list of all license templates\n       * @request GET:/licenses\n       * @secure\n       */\n      listLicenseTemplates: (params = {}) => this.request(__spreadValues({\n        path: `/licenses`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags miscellaneous\n       * @name GetLicenseTemplateInfo\n       * @summary Returns information about a license template\n       * @request GET:/licenses/{name}\n       * @secure\n       */\n      getLicenseTemplateInfo: (name, params = {}) => this.request(__spreadValues({\n        path: `/licenses/${name}`,\n        method: \"GET\",\n        secure: true\n      }, params))\n    };\n    this.markdown = {\n      /**\n       * No description\n       *\n       * @tags miscellaneous\n       * @name RenderMarkdown\n       * @summary Render a markdown document as HTML\n       * @request POST:/markdown\n       * @secure\n       */\n      renderMarkdown: (body, params = {}) => this.request(__spreadValues({\n        path: `/markdown`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags miscellaneous\n       * @name RenderMarkdownRaw\n       * @summary Render raw markdown as HTML\n       * @request POST:/markdown/raw\n       * @secure\n       */\n      renderMarkdownRaw: (body, params = {}) => this.request(__spreadValues({\n        path: `/markdown/raw`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"text/plain\" /* Text */\n      }, params))\n    };\n    this.markup = {\n      /**\n       * No description\n       *\n       * @tags miscellaneous\n       * @name RenderMarkup\n       * @summary Render a markup document as HTML\n       * @request POST:/markup\n       * @secure\n       */\n      renderMarkup: (body, params = {}) => this.request(__spreadValues({\n        path: `/markup`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params))\n    };\n    this.nodeinfo = {\n      /**\n       * No description\n       *\n       * @tags miscellaneous\n       * @name GetNodeInfo\n       * @summary Returns the nodeinfo of the Gitea application\n       * @request GET:/nodeinfo\n       * @secure\n       */\n      getNodeInfo: (params = {}) => this.request(__spreadValues({\n        path: `/nodeinfo`,\n        method: \"GET\",\n        secure: true\n      }, params))\n    };\n    this.notifications = {\n      /**\n       * No description\n       *\n       * @tags notification\n       * @name NotifyGetList\n       * @summary List users's notification threads\n       * @request GET:/notifications\n       * @secure\n       */\n      notifyGetList: (query, params = {}) => this.request(__spreadValues({\n        path: `/notifications`,\n        method: \"GET\",\n        query,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags notification\n       * @name NotifyReadList\n       * @summary Mark notification threads as read, pinned or unread\n       * @request PUT:/notifications\n       * @secure\n       */\n      notifyReadList: (query, params = {}) => this.request(__spreadValues({\n        path: `/notifications`,\n        method: \"PUT\",\n        query,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags notification\n       * @name NotifyNewAvailable\n       * @summary Check if unread notifications exist\n       * @request GET:/notifications/new\n       * @secure\n       */\n      notifyNewAvailable: (params = {}) => this.request(__spreadValues({\n        path: `/notifications/new`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags notification\n       * @name NotifyGetThread\n       * @summary Get notification thread by ID\n       * @request GET:/notifications/threads/{id}\n       * @secure\n       */\n      notifyGetThread: (id, params = {}) => this.request(__spreadValues({\n        path: `/notifications/threads/${id}`,\n        method: \"GET\",\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags notification\n       * @name NotifyReadThread\n       * @summary Mark notification thread as read by ID\n       * @request PATCH:/notifications/threads/{id}\n       * @secure\n       */\n      notifyReadThread: (id, query, params = {}) => this.request(__spreadValues({\n        path: `/notifications/threads/${id}`,\n        method: \"PATCH\",\n        query,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params))\n    };\n    this.org = {\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name CreateOrgRepoDeprecated\n       * @summary Create a repository in an organization\n       * @request POST:/org/{org}/repos\n       * @deprecated\n       * @secure\n       */\n      createOrgRepoDeprecated: (org, body, params = {}) => this.request(__spreadValues({\n        path: `/org/${org}/repos`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params))\n    };\n    this.orgs = {\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgGetAll\n       * @summary Get list of organizations\n       * @request GET:/orgs\n       * @secure\n       */\n      orgGetAll: (query, params = {}) => this.request(__spreadValues({\n        path: `/orgs`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgCreate\n       * @summary Create an organization\n       * @request POST:/orgs\n       * @secure\n       */\n      orgCreate: (organization, params = {}) => this.request(__spreadValues({\n        path: `/orgs`,\n        method: \"POST\",\n        body: organization,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgGet\n       * @summary Get an organization\n       * @request GET:/orgs/{org}\n       * @secure\n       */\n      orgGet: (org, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgDelete\n       * @summary Delete an organization\n       * @request DELETE:/orgs/{org}\n       * @secure\n       */\n      orgDelete: (org, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgEdit\n       * @summary Edit an organization\n       * @request PATCH:/orgs/{org}\n       * @secure\n       */\n      orgEdit: (org, body, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgGetRunnerRegistrationToken\n       * @summary Get an organization's actions runner registration token\n       * @request GET:/orgs/{org}/actions/runners/registration-token\n       * @secure\n       */\n      orgGetRunnerRegistrationToken: (org, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/actions/runners/registration-token`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgListActionsSecrets\n       * @summary List an organization's actions secrets\n       * @request GET:/orgs/{org}/actions/secrets\n       * @secure\n       */\n      orgListActionsSecrets: (org, query, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/actions/secrets`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name UpdateOrgSecret\n       * @summary Create or Update a secret value in an organization\n       * @request PUT:/orgs/{org}/actions/secrets/{secretname}\n       * @secure\n       */\n      updateOrgSecret: (org, secretname, body, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/actions/secrets/${secretname}`,\n        method: \"PUT\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name DeleteOrgSecret\n       * @summary Delete a secret in an organization\n       * @request DELETE:/orgs/{org}/actions/secrets/{secretname}\n       * @secure\n       */\n      deleteOrgSecret: (org, secretname, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/actions/secrets/${secretname}`,\n        method: \"DELETE\",\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name GetOrgVariablesList\n       * @summary Get an org-level variables list\n       * @request GET:/orgs/{org}/actions/variables\n       * @secure\n       */\n      getOrgVariablesList: (org, query, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/actions/variables`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name GetOrgVariable\n       * @summary Get an org-level variable\n       * @request GET:/orgs/{org}/actions/variables/{variablename}\n       * @secure\n       */\n      getOrgVariable: (org, variablename, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/actions/variables/${variablename}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name UpdateOrgVariable\n       * @summary Update an org-level variable\n       * @request PUT:/orgs/{org}/actions/variables/{variablename}\n       * @secure\n       */\n      updateOrgVariable: (org, variablename, body, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/actions/variables/${variablename}`,\n        method: \"PUT\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name CreateOrgVariable\n       * @summary Create an org-level variable\n       * @request POST:/orgs/{org}/actions/variables/{variablename}\n       * @secure\n       */\n      createOrgVariable: (org, variablename, body, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/actions/variables/${variablename}`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name DeleteOrgVariable\n       * @summary Delete an org-level variable\n       * @request DELETE:/orgs/{org}/actions/variables/{variablename}\n       * @secure\n       */\n      deleteOrgVariable: (org, variablename, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/actions/variables/${variablename}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgListActivityFeeds\n       * @summary List an organization's activity feeds\n       * @request GET:/orgs/{org}/activities/feeds\n       * @secure\n       */\n      orgListActivityFeeds: (org, query, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/activities/feeds`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgUpdateAvatar\n       * @summary Update Avatar\n       * @request POST:/orgs/{org}/avatar\n       * @secure\n       */\n      orgUpdateAvatar: (org, body, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/avatar`,\n        method: \"POST\",\n        body,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgDeleteAvatar\n       * @summary Delete Avatar\n       * @request DELETE:/orgs/{org}/avatar\n       * @secure\n       */\n      orgDeleteAvatar: (org, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/avatar`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrganizationListBlocks\n       * @summary List users blocked by the organization\n       * @request GET:/orgs/{org}/blocks\n       * @secure\n       */\n      organizationListBlocks: (org, query, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/blocks`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrganizationCheckUserBlock\n       * @summary Check if a user is blocked by the organization\n       * @request GET:/orgs/{org}/blocks/{username}\n       * @secure\n       */\n      organizationCheckUserBlock: (org, username, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/blocks/${username}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrganizationBlockUser\n       * @summary Block a user\n       * @request PUT:/orgs/{org}/blocks/{username}\n       * @secure\n       */\n      organizationBlockUser: (org, username, query, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/blocks/${username}`,\n        method: \"PUT\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrganizationUnblockUser\n       * @summary Unblock a user\n       * @request DELETE:/orgs/{org}/blocks/{username}\n       * @secure\n       */\n      organizationUnblockUser: (org, username, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/blocks/${username}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgListHooks\n       * @summary List an organization's webhooks\n       * @request GET:/orgs/{org}/hooks\n       * @secure\n       */\n      orgListHooks: (org, query, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/hooks`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgCreateHook\n       * @summary Create a hook\n       * @request POST:/orgs/{org}/hooks\n       * @secure\n       */\n      orgCreateHook: (org, body, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/hooks`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgGetHook\n       * @summary Get a hook\n       * @request GET:/orgs/{org}/hooks/{id}\n       * @secure\n       */\n      orgGetHook: (org, id, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/hooks/${id}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgDeleteHook\n       * @summary Delete a hook\n       * @request DELETE:/orgs/{org}/hooks/{id}\n       * @secure\n       */\n      orgDeleteHook: (org, id, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/hooks/${id}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgEditHook\n       * @summary Update a hook\n       * @request PATCH:/orgs/{org}/hooks/{id}\n       * @secure\n       */\n      orgEditHook: (org, id, body, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/hooks/${id}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgListLabels\n       * @summary List an organization's labels\n       * @request GET:/orgs/{org}/labels\n       * @secure\n       */\n      orgListLabels: (org, query, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/labels`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgCreateLabel\n       * @summary Create a label for an organization\n       * @request POST:/orgs/{org}/labels\n       * @secure\n       */\n      orgCreateLabel: (org, body, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/labels`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgGetLabel\n       * @summary Get a single label\n       * @request GET:/orgs/{org}/labels/{id}\n       * @secure\n       */\n      orgGetLabel: (org, id, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/labels/${id}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgDeleteLabel\n       * @summary Delete a label\n       * @request DELETE:/orgs/{org}/labels/{id}\n       * @secure\n       */\n      orgDeleteLabel: (org, id, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/labels/${id}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgEditLabel\n       * @summary Update a label\n       * @request PATCH:/orgs/{org}/labels/{id}\n       * @secure\n       */\n      orgEditLabel: (org, id, body, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/labels/${id}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgListMembers\n       * @summary List an organization's members\n       * @request GET:/orgs/{org}/members\n       * @secure\n       */\n      orgListMembers: (org, query, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/members`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgIsMember\n       * @summary Check if a user is a member of an organization\n       * @request GET:/orgs/{org}/members/{username}\n       * @secure\n       */\n      orgIsMember: (org, username, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/members/${username}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgDeleteMember\n       * @summary Remove a member from an organization\n       * @request DELETE:/orgs/{org}/members/{username}\n       * @secure\n       */\n      orgDeleteMember: (org, username, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/members/${username}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgListPublicMembers\n       * @summary List an organization's public members\n       * @request GET:/orgs/{org}/public_members\n       * @secure\n       */\n      orgListPublicMembers: (org, query, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/public_members`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgIsPublicMember\n       * @summary Check if a user is a public member of an organization\n       * @request GET:/orgs/{org}/public_members/{username}\n       * @secure\n       */\n      orgIsPublicMember: (org, username, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/public_members/${username}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgPublicizeMember\n       * @summary Publicize a user's membership\n       * @request PUT:/orgs/{org}/public_members/{username}\n       * @secure\n       */\n      orgPublicizeMember: (org, username, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/public_members/${username}`,\n        method: \"PUT\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgConcealMember\n       * @summary Conceal a user's membership\n       * @request DELETE:/orgs/{org}/public_members/{username}\n       * @secure\n       */\n      orgConcealMember: (org, username, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/public_members/${username}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgListRepos\n       * @summary List an organization's repos\n       * @request GET:/orgs/{org}/repos\n       * @secure\n       */\n      orgListRepos: (org, query, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/repos`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name CreateOrgRepo\n       * @summary Create a repository in an organization\n       * @request POST:/orgs/{org}/repos\n       * @secure\n       */\n      createOrgRepo: (org, body, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/repos`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgListTeams\n       * @summary List an organization's teams\n       * @request GET:/orgs/{org}/teams\n       * @secure\n       */\n      orgListTeams: (org, query, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/teams`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgCreateTeam\n       * @summary Create a team\n       * @request POST:/orgs/{org}/teams\n       * @secure\n       */\n      orgCreateTeam: (org, body, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/teams`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name TeamSearch\n       * @summary Search for teams within an organization\n       * @request GET:/orgs/{org}/teams/search\n       * @secure\n       */\n      teamSearch: (org, query, params = {}) => this.request(__spreadValues({\n        path: `/orgs/${org}/teams/search`,\n        method: \"GET\",\n        query,\n        secure: true,\n        format: \"json\"\n      }, params))\n    };\n    this.packages = {\n      /**\n       * No description\n       *\n       * @tags package\n       * @name ListPackages\n       * @summary Gets all packages of an owner\n       * @request GET:/packages/{owner}\n       * @secure\n       */\n      listPackages: (owner, query, params = {}) => this.request(__spreadValues({\n        path: `/packages/${owner}`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags package\n       * @name GetPackage\n       * @summary Gets a package\n       * @request GET:/packages/{owner}/{type}/{name}/{version}\n       * @secure\n       */\n      getPackage: (owner, type, name, version, params = {}) => this.request(__spreadValues({\n        path: `/packages/${owner}/${type}/${name}/${version}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags package\n       * @name DeletePackage\n       * @summary Delete a package\n       * @request DELETE:/packages/{owner}/{type}/{name}/{version}\n       * @secure\n       */\n      deletePackage: (owner, type, name, version, params = {}) => this.request(__spreadValues({\n        path: `/packages/${owner}/${type}/${name}/${version}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags package\n       * @name ListPackageFiles\n       * @summary Gets all files of a package\n       * @request GET:/packages/{owner}/{type}/{name}/{version}/files\n       * @secure\n       */\n      listPackageFiles: (owner, type, name, version, params = {}) => this.request(__spreadValues({\n        path: `/packages/${owner}/${type}/${name}/${version}/files`,\n        method: \"GET\",\n        secure: true\n      }, params))\n    };\n    this.repos = {\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueSearchIssues\n       * @summary Search for issues across the repositories that the user has access to\n       * @request GET:/repos/issues/search\n       * @secure\n       */\n      issueSearchIssues: (query, params = {}) => this.request(__spreadValues({\n        path: `/repos/issues/search`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoMigrate\n       * @summary Migrate a remote git repository\n       * @request POST:/repos/migrate\n       * @secure\n       */\n      repoMigrate: (body, params = {}) => this.request(__spreadValues({\n        path: `/repos/migrate`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoSearch\n       * @summary Search for repositories\n       * @request GET:/repos/search\n       * @secure\n       */\n      repoSearch: (query, params = {}) => this.request(__spreadValues({\n        path: `/repos/search`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGet\n       * @summary Get a repository\n       * @request GET:/repos/{owner}/{repo}\n       * @secure\n       */\n      repoGet: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDelete\n       * @summary Delete a repository\n       * @request DELETE:/repos/{owner}/{repo}\n       * @secure\n       */\n      repoDelete: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoEdit\n       * @summary Edit a repository's properties. Only fields that are set will be changed.\n       * @request PATCH:/repos/{owner}/{repo}\n       * @secure\n       */\n      repoEdit: (owner, repo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListActionsSecrets\n       * @summary List an repo's actions secrets\n       * @request GET:/repos/{owner}/{repo}/actions/secrets\n       * @secure\n       */\n      repoListActionsSecrets: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/actions/secrets`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name UpdateRepoSecret\n       * @summary Create or Update a secret value in a repository\n       * @request PUT:/repos/{owner}/{repo}/actions/secrets/{secretname}\n       * @secure\n       */\n      updateRepoSecret: (owner, repo, secretname, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/actions/secrets/${secretname}`,\n        method: \"PUT\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name DeleteRepoSecret\n       * @summary Delete a secret in a repository\n       * @request DELETE:/repos/{owner}/{repo}/actions/secrets/{secretname}\n       * @secure\n       */\n      deleteRepoSecret: (owner, repo, secretname, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/actions/secrets/${secretname}`,\n        method: \"DELETE\",\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name GetRepoVariablesList\n       * @summary Get repo-level variables list\n       * @request GET:/repos/{owner}/{repo}/actions/variables\n       * @secure\n       */\n      getRepoVariablesList: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/actions/variables`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name GetRepoVariable\n       * @summary Get a repo-level variable\n       * @request GET:/repos/{owner}/{repo}/actions/variables/{variablename}\n       * @secure\n       */\n      getRepoVariable: (owner, repo, variablename, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/actions/variables/${variablename}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name UpdateRepoVariable\n       * @summary Update a repo-level variable\n       * @request PUT:/repos/{owner}/{repo}/actions/variables/{variablename}\n       * @secure\n       */\n      updateRepoVariable: (owner, repo, variablename, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/actions/variables/${variablename}`,\n        method: \"PUT\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name CreateRepoVariable\n       * @summary Create a repo-level variable\n       * @request POST:/repos/{owner}/{repo}/actions/variables/{variablename}\n       * @secure\n       */\n      createRepoVariable: (owner, repo, variablename, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/actions/variables/${variablename}`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name DeleteRepoVariable\n       * @summary Delete a repo-level variable\n       * @request DELETE:/repos/{owner}/{repo}/actions/variables/{variablename}\n       * @secure\n       */\n      deleteRepoVariable: (owner, repo, variablename, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/actions/variables/${variablename}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListActivityFeeds\n       * @summary List a repository's activity feeds\n       * @request GET:/repos/{owner}/{repo}/activities/feeds\n       * @secure\n       */\n      repoListActivityFeeds: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/activities/feeds`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetArchive\n       * @summary Get an archive of a repository\n       * @request GET:/repos/{owner}/{repo}/archive/{archive}\n       * @secure\n       */\n      repoGetArchive: (owner, repo, archive, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/archive/${archive}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetAssignees\n       * @summary Return all users that have write access and can be assigned to issues\n       * @request GET:/repos/{owner}/{repo}/assignees\n       * @secure\n       */\n      repoGetAssignees: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/assignees`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoUpdateAvatar\n       * @summary Update avatar\n       * @request POST:/repos/{owner}/{repo}/avatar\n       * @secure\n       */\n      repoUpdateAvatar: (owner, repo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/avatar`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDeleteAvatar\n       * @summary Delete avatar\n       * @request DELETE:/repos/{owner}/{repo}/avatar\n       * @secure\n       */\n      repoDeleteAvatar: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/avatar`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListBranchProtection\n       * @summary List branch protections for a repository\n       * @request GET:/repos/{owner}/{repo}/branch_protections\n       * @secure\n       */\n      repoListBranchProtection: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/branch_protections`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoCreateBranchProtection\n       * @summary Create a branch protections for a repository\n       * @request POST:/repos/{owner}/{repo}/branch_protections\n       * @secure\n       */\n      repoCreateBranchProtection: (owner, repo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/branch_protections`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetBranchProtection\n       * @summary Get a specific branch protection for the repository\n       * @request GET:/repos/{owner}/{repo}/branch_protections/{name}\n       * @secure\n       */\n      repoGetBranchProtection: (owner, repo, name, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/branch_protections/${name}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDeleteBranchProtection\n       * @summary Delete a specific branch protection for the repository\n       * @request DELETE:/repos/{owner}/{repo}/branch_protections/{name}\n       * @secure\n       */\n      repoDeleteBranchProtection: (owner, repo, name, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/branch_protections/${name}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoEditBranchProtection\n       * @summary Edit a branch protections for a repository. Only fields that are set will be changed\n       * @request PATCH:/repos/{owner}/{repo}/branch_protections/{name}\n       * @secure\n       */\n      repoEditBranchProtection: (owner, repo, name, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/branch_protections/${name}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListBranches\n       * @summary List a repository's branches\n       * @request GET:/repos/{owner}/{repo}/branches\n       * @secure\n       */\n      repoListBranches: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/branches`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoCreateBranch\n       * @summary Create a branch\n       * @request POST:/repos/{owner}/{repo}/branches\n       * @secure\n       */\n      repoCreateBranch: (owner, repo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/branches`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetBranch\n       * @summary Retrieve a specific branch from a repository, including its effective branch protection\n       * @request GET:/repos/{owner}/{repo}/branches/{branch}\n       * @secure\n       */\n      repoGetBranch: (owner, repo, branch, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/branches/${branch}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDeleteBranch\n       * @summary Delete a specific branch from a repository\n       * @request DELETE:/repos/{owner}/{repo}/branches/{branch}\n       * @secure\n       */\n      repoDeleteBranch: (owner, repo, branch, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/branches/${branch}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListCollaborators\n       * @summary List a repository's collaborators\n       * @request GET:/repos/{owner}/{repo}/collaborators\n       * @secure\n       */\n      repoListCollaborators: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/collaborators`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoCheckCollaborator\n       * @summary Check if a user is a collaborator of a repository\n       * @request GET:/repos/{owner}/{repo}/collaborators/{collaborator}\n       * @secure\n       */\n      repoCheckCollaborator: (owner, repo, collaborator, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/collaborators/${collaborator}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoAddCollaborator\n       * @summary Add a collaborator to a repository\n       * @request PUT:/repos/{owner}/{repo}/collaborators/{collaborator}\n       * @secure\n       */\n      repoAddCollaborator: (owner, repo, collaborator, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/collaborators/${collaborator}`,\n        method: \"PUT\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDeleteCollaborator\n       * @summary Delete a collaborator from a repository\n       * @request DELETE:/repos/{owner}/{repo}/collaborators/{collaborator}\n       * @secure\n       */\n      repoDeleteCollaborator: (owner, repo, collaborator, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/collaborators/${collaborator}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetRepoPermissions\n       * @summary Get repository permissions for a user\n       * @request GET:/repos/{owner}/{repo}/collaborators/{collaborator}/permission\n       * @secure\n       */\n      repoGetRepoPermissions: (owner, repo, collaborator, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/collaborators/${collaborator}/permission`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetAllCommits\n       * @summary Get a list of all commits from a repository\n       * @request GET:/repos/{owner}/{repo}/commits\n       * @secure\n       */\n      repoGetAllCommits: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/commits`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetCombinedStatusByRef\n       * @summary Get a commit's combined status, by branch/tag/commit reference\n       * @request GET:/repos/{owner}/{repo}/commits/{ref}/status\n       * @secure\n       */\n      repoGetCombinedStatusByRef: (owner, repo, ref, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/commits/${ref}/status`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListStatusesByRef\n       * @summary Get a commit's statuses, by branch/tag/commit reference\n       * @request GET:/repos/{owner}/{repo}/commits/{ref}/statuses\n       * @secure\n       */\n      repoListStatusesByRef: (owner, repo, ref, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/commits/${ref}/statuses`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetCommitPullRequest\n       * @summary Get the pull request of the commit\n       * @request GET:/repos/{owner}/{repo}/commits/{sha}/pull\n       * @secure\n       */\n      repoGetCommitPullRequest: (owner, repo, sha, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/commits/${sha}/pull`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoCompareDiff\n       * @summary Get commit comparison information\n       * @request GET:/repos/{owner}/{repo}/compare/{basehead}\n       * @secure\n       */\n      repoCompareDiff: (owner, repo, basehead, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/compare/${basehead}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetContentsList\n       * @summary Gets the metadata of all the entries of the root dir\n       * @request GET:/repos/{owner}/{repo}/contents\n       * @secure\n       */\n      repoGetContentsList: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/contents`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoChangeFiles\n       * @summary Modify multiple files in a repository\n       * @request POST:/repos/{owner}/{repo}/contents\n       * @secure\n       */\n      repoChangeFiles: (owner, repo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/contents`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetContents\n       * @summary Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir\n       * @request GET:/repos/{owner}/{repo}/contents/{filepath}\n       * @secure\n       */\n      repoGetContents: (owner, repo, filepath, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/contents/${filepath}`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoUpdateFile\n       * @summary Update a file in a repository\n       * @request PUT:/repos/{owner}/{repo}/contents/{filepath}\n       * @secure\n       */\n      repoUpdateFile: (owner, repo, filepath, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/contents/${filepath}`,\n        method: \"PUT\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoCreateFile\n       * @summary Create a file in a repository\n       * @request POST:/repos/{owner}/{repo}/contents/{filepath}\n       * @secure\n       */\n      repoCreateFile: (owner, repo, filepath, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/contents/${filepath}`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDeleteFile\n       * @summary Delete a file in a repository\n       * @request DELETE:/repos/{owner}/{repo}/contents/{filepath}\n       * @secure\n       */\n      repoDeleteFile: (owner, repo, filepath, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/contents/${filepath}`,\n        method: \"DELETE\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoApplyDiffPatch\n       * @summary Apply diff patch to repository\n       * @request POST:/repos/{owner}/{repo}/diffpatch\n       * @secure\n       */\n      repoApplyDiffPatch: (owner, repo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/diffpatch`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetEditorConfig\n       * @summary Get the EditorConfig definitions of a file in a repository\n       * @request GET:/repos/{owner}/{repo}/editorconfig/{filepath}\n       * @secure\n       */\n      repoGetEditorConfig: (owner, repo, filepath, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/editorconfig/${filepath}`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name ListForks\n       * @summary List a repository's forks\n       * @request GET:/repos/{owner}/{repo}/forks\n       * @secure\n       */\n      listForks: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/forks`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name CreateFork\n       * @summary Fork a repository\n       * @request POST:/repos/{owner}/{repo}/forks\n       * @secure\n       */\n      createFork: (owner, repo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/forks`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name GetBlob\n       * @summary Gets the blob of a repository.\n       * @request GET:/repos/{owner}/{repo}/git/blobs/{sha}\n       * @secure\n       */\n      getBlob: (owner, repo, sha, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/git/blobs/${sha}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetSingleCommit\n       * @summary Get a single commit from a repository\n       * @request GET:/repos/{owner}/{repo}/git/commits/{sha}\n       * @secure\n       */\n      repoGetSingleCommit: (owner, repo, sha, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/git/commits/${sha}`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDownloadCommitDiffOrPatch\n       * @summary Get a commit's diff or patch\n       * @request GET:/repos/{owner}/{repo}/git/commits/{sha}.{diffType}\n       * @secure\n       */\n      repoDownloadCommitDiffOrPatch: (owner, repo, sha, diffType, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/git/commits/${sha}.${diffType}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetNote\n       * @summary Get a note corresponding to a single commit from a repository\n       * @request GET:/repos/{owner}/{repo}/git/notes/{sha}\n       * @secure\n       */\n      repoGetNote: (owner, repo, sha, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/git/notes/${sha}`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListAllGitRefs\n       * @summary Get specified ref or filtered repository's refs\n       * @request GET:/repos/{owner}/{repo}/git/refs\n       * @secure\n       */\n      repoListAllGitRefs: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/git/refs`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListGitRefs\n       * @summary Get specified ref or filtered repository's refs\n       * @request GET:/repos/{owner}/{repo}/git/refs/{ref}\n       * @secure\n       */\n      repoListGitRefs: (owner, repo, ref, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/git/refs/${ref}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name GetAnnotatedTag\n       * @summary Gets the tag object of an annotated tag (not lightweight tags)\n       * @request GET:/repos/{owner}/{repo}/git/tags/{sha}\n       * @secure\n       */\n      getAnnotatedTag: (owner, repo, sha, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/git/tags/${sha}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name GetTree\n       * @summary Gets the tree of a repository.\n       * @request GET:/repos/{owner}/{repo}/git/trees/{sha}\n       * @secure\n       */\n      getTree: (owner, repo, sha, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/git/trees/${sha}`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListHooks\n       * @summary List the hooks in a repository\n       * @request GET:/repos/{owner}/{repo}/hooks\n       * @secure\n       */\n      repoListHooks: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/hooks`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoCreateHook\n       * @summary Create a hook\n       * @request POST:/repos/{owner}/{repo}/hooks\n       * @secure\n       */\n      repoCreateHook: (owner, repo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/hooks`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListGitHooks\n       * @summary List the Git hooks in a repository\n       * @request GET:/repos/{owner}/{repo}/hooks/git\n       * @secure\n       */\n      repoListGitHooks: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/hooks/git`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetGitHook\n       * @summary Get a Git hook\n       * @request GET:/repos/{owner}/{repo}/hooks/git/{id}\n       * @secure\n       */\n      repoGetGitHook: (owner, repo, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/hooks/git/${id}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDeleteGitHook\n       * @summary Delete a Git hook in a repository\n       * @request DELETE:/repos/{owner}/{repo}/hooks/git/{id}\n       * @secure\n       */\n      repoDeleteGitHook: (owner, repo, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/hooks/git/${id}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoEditGitHook\n       * @summary Edit a Git hook in a repository\n       * @request PATCH:/repos/{owner}/{repo}/hooks/git/{id}\n       * @secure\n       */\n      repoEditGitHook: (owner, repo, id, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/hooks/git/${id}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetHook\n       * @summary Get a hook\n       * @request GET:/repos/{owner}/{repo}/hooks/{id}\n       * @secure\n       */\n      repoGetHook: (owner, repo, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/hooks/${id}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDeleteHook\n       * @summary Delete a hook in a repository\n       * @request DELETE:/repos/{owner}/{repo}/hooks/{id}\n       * @secure\n       */\n      repoDeleteHook: (owner, repo, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/hooks/${id}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoEditHook\n       * @summary Edit a hook in a repository\n       * @request PATCH:/repos/{owner}/{repo}/hooks/{id}\n       * @secure\n       */\n      repoEditHook: (owner, repo, id, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/hooks/${id}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoTestHook\n       * @summary Test a push webhook\n       * @request POST:/repos/{owner}/{repo}/hooks/{id}/tests\n       * @secure\n       */\n      repoTestHook: (owner, repo, id, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/hooks/${id}/tests`,\n        method: \"POST\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetIssueConfig\n       * @summary Returns the issue config for a repo\n       * @request GET:/repos/{owner}/{repo}/issue_config\n       * @secure\n       */\n      repoGetIssueConfig: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issue_config`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoValidateIssueConfig\n       * @summary Returns the validation information for a issue config\n       * @request GET:/repos/{owner}/{repo}/issue_config/validate\n       * @secure\n       */\n      repoValidateIssueConfig: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issue_config/validate`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetIssueTemplates\n       * @summary Get available issue templates for a repository\n       * @request GET:/repos/{owner}/{repo}/issue_templates\n       * @secure\n       */\n      repoGetIssueTemplates: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issue_templates`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueListIssues\n       * @summary List a repository's issues\n       * @request GET:/repos/{owner}/{repo}/issues\n       * @secure\n       */\n      issueListIssues: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueCreateIssue\n       * @summary Create an issue. If using deadline only the date will be taken into account, and time of day ignored.\n       * @request POST:/repos/{owner}/{repo}/issues\n       * @secure\n       */\n      issueCreateIssue: (owner, repo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueGetRepoComments\n       * @summary List all comments in a repository\n       * @request GET:/repos/{owner}/{repo}/issues/comments\n       * @secure\n       */\n      issueGetRepoComments: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/comments`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueGetComment\n       * @summary Get a comment\n       * @request GET:/repos/{owner}/{repo}/issues/comments/{id}\n       * @secure\n       */\n      issueGetComment: (owner, repo, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/comments/${id}`,\n        method: \"GET\",\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueDeleteComment\n       * @summary Delete a comment\n       * @request DELETE:/repos/{owner}/{repo}/issues/comments/{id}\n       * @secure\n       */\n      issueDeleteComment: (owner, repo, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/comments/${id}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueEditComment\n       * @summary Edit a comment\n       * @request PATCH:/repos/{owner}/{repo}/issues/comments/{id}\n       * @secure\n       */\n      issueEditComment: (owner, repo, id, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/comments/${id}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueListIssueCommentAttachments\n       * @summary List comment's attachments\n       * @request GET:/repos/{owner}/{repo}/issues/comments/{id}/assets\n       * @secure\n       */\n      issueListIssueCommentAttachments: (owner, repo, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/comments/${id}/assets`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueCreateIssueCommentAttachment\n       * @summary Create a comment attachment\n       * @request POST:/repos/{owner}/{repo}/issues/comments/{id}/assets\n       * @secure\n       */\n      issueCreateIssueCommentAttachment: (owner, repo, id, data, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/comments/${id}/assets`,\n        method: \"POST\",\n        query,\n        body: data,\n        secure: true,\n        type: \"multipart/form-data\" /* FormData */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueGetIssueCommentAttachment\n       * @summary Get a comment attachment\n       * @request GET:/repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}\n       * @secure\n       */\n      issueGetIssueCommentAttachment: (owner, repo, id, attachmentId, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/comments/${id}/assets/${attachmentId}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueDeleteIssueCommentAttachment\n       * @summary Delete a comment attachment\n       * @request DELETE:/repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}\n       * @secure\n       */\n      issueDeleteIssueCommentAttachment: (owner, repo, id, attachmentId, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/comments/${id}/assets/${attachmentId}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueEditIssueCommentAttachment\n       * @summary Edit a comment attachment\n       * @request PATCH:/repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}\n       * @secure\n       */\n      issueEditIssueCommentAttachment: (owner, repo, id, attachmentId, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/comments/${id}/assets/${attachmentId}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueGetCommentReactions\n       * @summary Get a list of reactions from a comment of an issue\n       * @request GET:/repos/{owner}/{repo}/issues/comments/{id}/reactions\n       * @secure\n       */\n      issueGetCommentReactions: (owner, repo, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/comments/${id}/reactions`,\n        method: \"GET\",\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssuePostCommentReaction\n       * @summary Add a reaction to a comment of an issue\n       * @request POST:/repos/{owner}/{repo}/issues/comments/{id}/reactions\n       * @secure\n       */\n      issuePostCommentReaction: (owner, repo, id, content, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/comments/${id}/reactions`,\n        method: \"POST\",\n        body: content,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueDeleteCommentReaction\n       * @summary Remove a reaction from a comment of an issue\n       * @request DELETE:/repos/{owner}/{repo}/issues/comments/{id}/reactions\n       * @secure\n       */\n      issueDeleteCommentReaction: (owner, repo, id, content, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/comments/${id}/reactions`,\n        method: \"DELETE\",\n        body: content,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListPinnedIssues\n       * @summary List a repo's pinned issues\n       * @request GET:/repos/{owner}/{repo}/issues/pinned\n       * @secure\n       */\n      repoListPinnedIssues: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/pinned`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueGetIssue\n       * @summary Get an issue\n       * @request GET:/repos/{owner}/{repo}/issues/{index}\n       * @secure\n       */\n      issueGetIssue: (owner, repo, index, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueDelete\n       * @summary Delete an issue\n       * @request DELETE:/repos/{owner}/{repo}/issues/{index}\n       * @secure\n       */\n      issueDelete: (owner, repo, index, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueEditIssue\n       * @summary Edit an issue. If using deadline only the date will be taken into account, and time of day ignored.\n       * @request PATCH:/repos/{owner}/{repo}/issues/{index}\n       * @secure\n       */\n      issueEditIssue: (owner, repo, index, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueListIssueAttachments\n       * @summary List issue's attachments\n       * @request GET:/repos/{owner}/{repo}/issues/{index}/assets\n       * @secure\n       */\n      issueListIssueAttachments: (owner, repo, index, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/assets`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueCreateIssueAttachment\n       * @summary Create an issue attachment\n       * @request POST:/repos/{owner}/{repo}/issues/{index}/assets\n       * @secure\n       */\n      issueCreateIssueAttachment: (owner, repo, index, data, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/assets`,\n        method: \"POST\",\n        query,\n        body: data,\n        secure: true,\n        type: \"multipart/form-data\" /* FormData */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueGetIssueAttachment\n       * @summary Get an issue attachment\n       * @request GET:/repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}\n       * @secure\n       */\n      issueGetIssueAttachment: (owner, repo, index, attachmentId, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/assets/${attachmentId}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueDeleteIssueAttachment\n       * @summary Delete an issue attachment\n       * @request DELETE:/repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}\n       * @secure\n       */\n      issueDeleteIssueAttachment: (owner, repo, index, attachmentId, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/assets/${attachmentId}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueEditIssueAttachment\n       * @summary Edit an issue attachment\n       * @request PATCH:/repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}\n       * @secure\n       */\n      issueEditIssueAttachment: (owner, repo, index, attachmentId, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/assets/${attachmentId}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueListBlocks\n       * @summary List issues that are blocked by this issue\n       * @request GET:/repos/{owner}/{repo}/issues/{index}/blocks\n       * @secure\n       */\n      issueListBlocks: (owner, repo, index, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/blocks`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueCreateIssueBlocking\n       * @summary Block the issue given in the body by the issue in path\n       * @request POST:/repos/{owner}/{repo}/issues/{index}/blocks\n       * @secure\n       */\n      issueCreateIssueBlocking: (owner, repo, index, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/blocks`,\n        method: \"POST\",\n        body,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueRemoveIssueBlocking\n       * @summary Unblock the issue given in the body by the issue in path\n       * @request DELETE:/repos/{owner}/{repo}/issues/{index}/blocks\n       * @secure\n       */\n      issueRemoveIssueBlocking: (owner, repo, index, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/blocks`,\n        method: \"DELETE\",\n        body,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueGetComments\n       * @summary List all comments on an issue\n       * @request GET:/repos/{owner}/{repo}/issues/{index}/comments\n       * @secure\n       */\n      issueGetComments: (owner, repo, index, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/comments`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueCreateComment\n       * @summary Add a comment to an issue\n       * @request POST:/repos/{owner}/{repo}/issues/{index}/comments\n       * @secure\n       */\n      issueCreateComment: (owner, repo, index, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/comments`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueDeleteCommentDeprecated\n       * @summary Delete a comment\n       * @request DELETE:/repos/{owner}/{repo}/issues/{index}/comments/{id}\n       * @deprecated\n       * @secure\n       */\n      issueDeleteCommentDeprecated: (owner, repo, index, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/comments/${id}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueEditCommentDeprecated\n       * @summary Edit a comment\n       * @request PATCH:/repos/{owner}/{repo}/issues/{index}/comments/{id}\n       * @deprecated\n       * @secure\n       */\n      issueEditCommentDeprecated: (owner, repo, index, id, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/comments/${id}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueEditIssueDeadline\n       * @summary Set an issue deadline. If set to null, the deadline is deleted. If using deadline only the date will be taken into account, and time of day ignored.\n       * @request POST:/repos/{owner}/{repo}/issues/{index}/deadline\n       * @secure\n       */\n      issueEditIssueDeadline: (owner, repo, index, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/deadline`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueListIssueDependencies\n       * @summary List an issue's dependencies, i.e all issues that block this issue.\n       * @request GET:/repos/{owner}/{repo}/issues/{index}/dependencies\n       * @secure\n       */\n      issueListIssueDependencies: (owner, repo, index, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/dependencies`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueCreateIssueDependencies\n       * @summary Make the issue in the url depend on the issue in the form.\n       * @request POST:/repos/{owner}/{repo}/issues/{index}/dependencies\n       * @secure\n       */\n      issueCreateIssueDependencies: (owner, repo, index, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/dependencies`,\n        method: \"POST\",\n        body,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueRemoveIssueDependencies\n       * @summary Remove an issue dependency\n       * @request DELETE:/repos/{owner}/{repo}/issues/{index}/dependencies\n       * @secure\n       */\n      issueRemoveIssueDependencies: (owner, repo, index, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/dependencies`,\n        method: \"DELETE\",\n        body,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueGetLabels\n       * @summary Get an issue's labels\n       * @request GET:/repos/{owner}/{repo}/issues/{index}/labels\n       * @secure\n       */\n      issueGetLabels: (owner, repo, index, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/labels`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueReplaceLabels\n       * @summary Replace an issue's labels\n       * @request PUT:/repos/{owner}/{repo}/issues/{index}/labels\n       * @secure\n       */\n      issueReplaceLabels: (owner, repo, index, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/labels`,\n        method: \"PUT\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueAddLabel\n       * @summary Add a label to an issue\n       * @request POST:/repos/{owner}/{repo}/issues/{index}/labels\n       * @secure\n       */\n      issueAddLabel: (owner, repo, index, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/labels`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueClearLabels\n       * @summary Remove all labels from an issue\n       * @request DELETE:/repos/{owner}/{repo}/issues/{index}/labels\n       * @secure\n       */\n      issueClearLabels: (owner, repo, index, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/labels`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueRemoveLabel\n       * @summary Remove a label from an issue\n       * @request DELETE:/repos/{owner}/{repo}/issues/{index}/labels/{id}\n       * @secure\n       */\n      issueRemoveLabel: (owner, repo, index, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/labels/${id}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name PinIssue\n       * @summary Pin an Issue\n       * @request POST:/repos/{owner}/{repo}/issues/{index}/pin\n       * @secure\n       */\n      pinIssue: (owner, repo, index, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/pin`,\n        method: \"POST\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name UnpinIssue\n       * @summary Unpin an Issue\n       * @request DELETE:/repos/{owner}/{repo}/issues/{index}/pin\n       * @secure\n       */\n      unpinIssue: (owner, repo, index, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/pin`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name MoveIssuePin\n       * @summary Moves the Pin to the given Position\n       * @request PATCH:/repos/{owner}/{repo}/issues/{index}/pin/{position}\n       * @secure\n       */\n      moveIssuePin: (owner, repo, index, position, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/pin/${position}`,\n        method: \"PATCH\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueGetIssueReactions\n       * @summary Get a list reactions of an issue\n       * @request GET:/repos/{owner}/{repo}/issues/{index}/reactions\n       * @secure\n       */\n      issueGetIssueReactions: (owner, repo, index, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/reactions`,\n        method: \"GET\",\n        query,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssuePostIssueReaction\n       * @summary Add a reaction to an issue\n       * @request POST:/repos/{owner}/{repo}/issues/{index}/reactions\n       * @secure\n       */\n      issuePostIssueReaction: (owner, repo, index, content, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/reactions`,\n        method: \"POST\",\n        body: content,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueDeleteIssueReaction\n       * @summary Remove a reaction from an issue\n       * @request DELETE:/repos/{owner}/{repo}/issues/{index}/reactions\n       * @secure\n       */\n      issueDeleteIssueReaction: (owner, repo, index, content, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/reactions`,\n        method: \"DELETE\",\n        body: content,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueDeleteStopWatch\n       * @summary Delete an issue's existing stopwatch.\n       * @request DELETE:/repos/{owner}/{repo}/issues/{index}/stopwatch/delete\n       * @secure\n       */\n      issueDeleteStopWatch: (owner, repo, index, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/stopwatch/delete`,\n        method: \"DELETE\",\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueStartStopWatch\n       * @summary Start stopwatch on an issue.\n       * @request POST:/repos/{owner}/{repo}/issues/{index}/stopwatch/start\n       * @secure\n       */\n      issueStartStopWatch: (owner, repo, index, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/stopwatch/start`,\n        method: \"POST\",\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueStopStopWatch\n       * @summary Stop an issue's existing stopwatch.\n       * @request POST:/repos/{owner}/{repo}/issues/{index}/stopwatch/stop\n       * @secure\n       */\n      issueStopStopWatch: (owner, repo, index, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/stopwatch/stop`,\n        method: \"POST\",\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueSubscriptions\n       * @summary Get users who subscribed on an issue.\n       * @request GET:/repos/{owner}/{repo}/issues/{index}/subscriptions\n       * @secure\n       */\n      issueSubscriptions: (owner, repo, index, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/subscriptions`,\n        method: \"GET\",\n        query,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueCheckSubscription\n       * @summary Check if user is subscribed to an issue\n       * @request GET:/repos/{owner}/{repo}/issues/{index}/subscriptions/check\n       * @secure\n       */\n      issueCheckSubscription: (owner, repo, index, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/subscriptions/check`,\n        method: \"GET\",\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueAddSubscription\n       * @summary Subscribe user to issue\n       * @request PUT:/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}\n       * @secure\n       */\n      issueAddSubscription: (owner, repo, index, user, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/subscriptions/${user}`,\n        method: \"PUT\",\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueDeleteSubscription\n       * @summary Unsubscribe user from issue\n       * @request DELETE:/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}\n       * @secure\n       */\n      issueDeleteSubscription: (owner, repo, index, user, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/subscriptions/${user}`,\n        method: \"DELETE\",\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueGetCommentsAndTimeline\n       * @summary List all comments and events on an issue\n       * @request GET:/repos/{owner}/{repo}/issues/{index}/timeline\n       * @secure\n       */\n      issueGetCommentsAndTimeline: (owner, repo, index, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/timeline`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueTrackedTimes\n       * @summary List an issue's tracked times\n       * @request GET:/repos/{owner}/{repo}/issues/{index}/times\n       * @secure\n       */\n      issueTrackedTimes: (owner, repo, index, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/times`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueAddTime\n       * @summary Add tracked time to a issue\n       * @request POST:/repos/{owner}/{repo}/issues/{index}/times\n       * @secure\n       */\n      issueAddTime: (owner, repo, index, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/times`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueResetTime\n       * @summary Reset a tracked time of an issue\n       * @request DELETE:/repos/{owner}/{repo}/issues/{index}/times\n       * @secure\n       */\n      issueResetTime: (owner, repo, index, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/times`,\n        method: \"DELETE\",\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueDeleteTime\n       * @summary Delete specific tracked time\n       * @request DELETE:/repos/{owner}/{repo}/issues/{index}/times/{id}\n       * @secure\n       */\n      issueDeleteTime: (owner, repo, index, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/issues/${index}/times/${id}`,\n        method: \"DELETE\",\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListKeys\n       * @summary List a repository's keys\n       * @request GET:/repos/{owner}/{repo}/keys\n       * @secure\n       */\n      repoListKeys: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/keys`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoCreateKey\n       * @summary Add a key to a repository\n       * @request POST:/repos/{owner}/{repo}/keys\n       * @secure\n       */\n      repoCreateKey: (owner, repo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/keys`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetKey\n       * @summary Get a repository's key by id\n       * @request GET:/repos/{owner}/{repo}/keys/{id}\n       * @secure\n       */\n      repoGetKey: (owner, repo, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/keys/${id}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDeleteKey\n       * @summary Delete a key from a repository\n       * @request DELETE:/repos/{owner}/{repo}/keys/{id}\n       * @secure\n       */\n      repoDeleteKey: (owner, repo, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/keys/${id}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueListLabels\n       * @summary Get all of a repository's labels\n       * @request GET:/repos/{owner}/{repo}/labels\n       * @secure\n       */\n      issueListLabels: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/labels`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueCreateLabel\n       * @summary Create a label\n       * @request POST:/repos/{owner}/{repo}/labels\n       * @secure\n       */\n      issueCreateLabel: (owner, repo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/labels`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueGetLabel\n       * @summary Get a single label\n       * @request GET:/repos/{owner}/{repo}/labels/{id}\n       * @secure\n       */\n      issueGetLabel: (owner, repo, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/labels/${id}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueDeleteLabel\n       * @summary Delete a label\n       * @request DELETE:/repos/{owner}/{repo}/labels/{id}\n       * @secure\n       */\n      issueDeleteLabel: (owner, repo, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/labels/${id}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueEditLabel\n       * @summary Update a label\n       * @request PATCH:/repos/{owner}/{repo}/labels/{id}\n       * @secure\n       */\n      issueEditLabel: (owner, repo, id, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/labels/${id}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetLanguages\n       * @summary Get languages and number of bytes of code written\n       * @request GET:/repos/{owner}/{repo}/languages\n       * @secure\n       */\n      repoGetLanguages: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/languages`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetRawFileOrLfs\n       * @summary Get a file or it's LFS object from a repository\n       * @request GET:/repos/{owner}/{repo}/media/{filepath}\n       * @secure\n       */\n      repoGetRawFileOrLfs: (owner, repo, filepath, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/media/${filepath}`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueGetMilestonesList\n       * @summary Get all of a repository's opened milestones\n       * @request GET:/repos/{owner}/{repo}/milestones\n       * @secure\n       */\n      issueGetMilestonesList: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/milestones`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueCreateMilestone\n       * @summary Create a milestone\n       * @request POST:/repos/{owner}/{repo}/milestones\n       * @secure\n       */\n      issueCreateMilestone: (owner, repo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/milestones`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueGetMilestone\n       * @summary Get a milestone\n       * @request GET:/repos/{owner}/{repo}/milestones/{id}\n       * @secure\n       */\n      issueGetMilestone: (owner, repo, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/milestones/${id}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueDeleteMilestone\n       * @summary Delete a milestone\n       * @request DELETE:/repos/{owner}/{repo}/milestones/{id}\n       * @secure\n       */\n      issueDeleteMilestone: (owner, repo, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/milestones/${id}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags issue\n       * @name IssueEditMilestone\n       * @summary Update a milestone\n       * @request PATCH:/repos/{owner}/{repo}/milestones/{id}\n       * @secure\n       */\n      issueEditMilestone: (owner, repo, id, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/milestones/${id}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoMirrorSync\n       * @summary Sync a mirrored repository\n       * @request POST:/repos/{owner}/{repo}/mirror-sync\n       * @secure\n       */\n      repoMirrorSync: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/mirror-sync`,\n        method: \"POST\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoNewPinAllowed\n       * @summary Returns if new Issue Pins are allowed\n       * @request GET:/repos/{owner}/{repo}/new_pin_allowed\n       * @secure\n       */\n      repoNewPinAllowed: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/new_pin_allowed`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags notification\n       * @name NotifyGetRepoList\n       * @summary List users's notification threads on a specific repo\n       * @request GET:/repos/{owner}/{repo}/notifications\n       * @secure\n       */\n      notifyGetRepoList: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/notifications`,\n        method: \"GET\",\n        query,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags notification\n       * @name NotifyReadRepoList\n       * @summary Mark notification threads as read, pinned or unread on a specific repo\n       * @request PUT:/repos/{owner}/{repo}/notifications\n       * @secure\n       */\n      notifyReadRepoList: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/notifications`,\n        method: \"PUT\",\n        query,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListPullRequests\n       * @summary List a repo's pull requests\n       * @request GET:/repos/{owner}/{repo}/pulls\n       * @secure\n       */\n      repoListPullRequests: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoCreatePullRequest\n       * @summary Create a pull request\n       * @request POST:/repos/{owner}/{repo}/pulls\n       * @secure\n       */\n      repoCreatePullRequest: (owner, repo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListPinnedPullRequests\n       * @summary List a repo's pinned pull requests\n       * @request GET:/repos/{owner}/{repo}/pulls/pinned\n       * @secure\n       */\n      repoListPinnedPullRequests: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/pinned`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetPullRequestByBaseHead\n       * @summary Get a pull request by base and head\n       * @request GET:/repos/{owner}/{repo}/pulls/{base}/{head}\n       * @secure\n       */\n      repoGetPullRequestByBaseHead: (owner, repo, base, head, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${base}/${head}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetPullRequest\n       * @summary Get a pull request\n       * @request GET:/repos/{owner}/{repo}/pulls/{index}\n       * @secure\n       */\n      repoGetPullRequest: (owner, repo, index, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${index}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoEditPullRequest\n       * @summary Update a pull request. If using deadline only the date will be taken into account, and time of day ignored.\n       * @request PATCH:/repos/{owner}/{repo}/pulls/{index}\n       * @secure\n       */\n      repoEditPullRequest: (owner, repo, index, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${index}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDownloadPullDiffOrPatch\n       * @summary Get a pull request diff or patch\n       * @request GET:/repos/{owner}/{repo}/pulls/{index}.{diffType}\n       * @secure\n       */\n      repoDownloadPullDiffOrPatch: (owner, repo, index, diffType, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${index}.${diffType}`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetPullRequestCommits\n       * @summary Get commits for a pull request\n       * @request GET:/repos/{owner}/{repo}/pulls/{index}/commits\n       * @secure\n       */\n      repoGetPullRequestCommits: (owner, repo, index, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${index}/commits`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetPullRequestFiles\n       * @summary Get changed files for a pull request\n       * @request GET:/repos/{owner}/{repo}/pulls/{index}/files\n       * @secure\n       */\n      repoGetPullRequestFiles: (owner, repo, index, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${index}/files`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoPullRequestIsMerged\n       * @summary Check if a pull request has been merged\n       * @request GET:/repos/{owner}/{repo}/pulls/{index}/merge\n       * @secure\n       */\n      repoPullRequestIsMerged: (owner, repo, index, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${index}/merge`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoMergePullRequest\n       * @summary Merge a pull request\n       * @request POST:/repos/{owner}/{repo}/pulls/{index}/merge\n       * @secure\n       */\n      repoMergePullRequest: (owner, repo, index, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${index}/merge`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoCancelScheduledAutoMerge\n       * @summary Cancel the scheduled auto merge for the given pull request\n       * @request DELETE:/repos/{owner}/{repo}/pulls/{index}/merge\n       * @secure\n       */\n      repoCancelScheduledAutoMerge: (owner, repo, index, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${index}/merge`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoCreatePullReviewRequests\n       * @summary create review requests for a pull request\n       * @request POST:/repos/{owner}/{repo}/pulls/{index}/requested_reviewers\n       * @secure\n       */\n      repoCreatePullReviewRequests: (owner, repo, index, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${index}/requested_reviewers`,\n        method: \"POST\",\n        body,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDeletePullReviewRequests\n       * @summary cancel review requests for a pull request\n       * @request DELETE:/repos/{owner}/{repo}/pulls/{index}/requested_reviewers\n       * @secure\n       */\n      repoDeletePullReviewRequests: (owner, repo, index, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${index}/requested_reviewers`,\n        method: \"DELETE\",\n        body,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListPullReviews\n       * @summary List all reviews for a pull request\n       * @request GET:/repos/{owner}/{repo}/pulls/{index}/reviews\n       * @secure\n       */\n      repoListPullReviews: (owner, repo, index, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${index}/reviews`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoCreatePullReview\n       * @summary Create a review to an pull request\n       * @request POST:/repos/{owner}/{repo}/pulls/{index}/reviews\n       * @secure\n       */\n      repoCreatePullReview: (owner, repo, index, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${index}/reviews`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetPullReview\n       * @summary Get a specific review for a pull request\n       * @request GET:/repos/{owner}/{repo}/pulls/{index}/reviews/{id}\n       * @secure\n       */\n      repoGetPullReview: (owner, repo, index, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${index}/reviews/${id}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoSubmitPullReview\n       * @summary Submit a pending review to an pull request\n       * @request POST:/repos/{owner}/{repo}/pulls/{index}/reviews/{id}\n       * @secure\n       */\n      repoSubmitPullReview: (owner, repo, index, id, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${index}/reviews/${id}`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDeletePullReview\n       * @summary Delete a specific review from a pull request\n       * @request DELETE:/repos/{owner}/{repo}/pulls/{index}/reviews/{id}\n       * @secure\n       */\n      repoDeletePullReview: (owner, repo, index, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${index}/reviews/${id}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetPullReviewComments\n       * @summary Get a specific review for a pull request\n       * @request GET:/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/comments\n       * @secure\n       */\n      repoGetPullReviewComments: (owner, repo, index, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${index}/reviews/${id}/comments`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDismissPullReview\n       * @summary Dismiss a review for a pull request\n       * @request POST:/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/dismissals\n       * @secure\n       */\n      repoDismissPullReview: (owner, repo, index, id, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${index}/reviews/${id}/dismissals`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoUnDismissPullReview\n       * @summary Cancel to dismiss a review for a pull request\n       * @request POST:/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/undismissals\n       * @secure\n       */\n      repoUnDismissPullReview: (owner, repo, index, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${index}/reviews/${id}/undismissals`,\n        method: \"POST\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoUpdatePullRequest\n       * @summary Merge PR's baseBranch into headBranch\n       * @request POST:/repos/{owner}/{repo}/pulls/{index}/update\n       * @secure\n       */\n      repoUpdatePullRequest: (owner, repo, index, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/pulls/${index}/update`,\n        method: \"POST\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListPushMirrors\n       * @summary Get all push mirrors of the repository\n       * @request GET:/repos/{owner}/{repo}/push_mirrors\n       * @secure\n       */\n      repoListPushMirrors: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/push_mirrors`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoAddPushMirror\n       * @summary add a push mirror to the repository\n       * @request POST:/repos/{owner}/{repo}/push_mirrors\n       * @secure\n       */\n      repoAddPushMirror: (owner, repo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/push_mirrors`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoPushMirrorSync\n       * @summary Sync all push mirrored repository\n       * @request POST:/repos/{owner}/{repo}/push_mirrors-sync\n       * @secure\n       */\n      repoPushMirrorSync: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/push_mirrors-sync`,\n        method: \"POST\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetPushMirrorByRemoteName\n       * @summary Get push mirror of the repository by remoteName\n       * @request GET:/repos/{owner}/{repo}/push_mirrors/{name}\n       * @secure\n       */\n      repoGetPushMirrorByRemoteName: (owner, repo, name, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/push_mirrors/${name}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDeletePushMirror\n       * @summary deletes a push mirror from a repository by remoteName\n       * @request DELETE:/repos/{owner}/{repo}/push_mirrors/{name}\n       * @secure\n       */\n      repoDeletePushMirror: (owner, repo, name, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/push_mirrors/${name}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetRawFile\n       * @summary Get a file from a repository\n       * @request GET:/repos/{owner}/{repo}/raw/{filepath}\n       * @secure\n       */\n      repoGetRawFile: (owner, repo, filepath, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/raw/${filepath}`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListReleases\n       * @summary List a repo's releases\n       * @request GET:/repos/{owner}/{repo}/releases\n       * @secure\n       */\n      repoListReleases: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/releases`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoCreateRelease\n       * @summary Create a release\n       * @request POST:/repos/{owner}/{repo}/releases\n       * @secure\n       */\n      repoCreateRelease: (owner, repo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/releases`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetLatestRelease\n       * @summary Gets the most recent non-prerelease, non-draft release of a repository, sorted by created_at\n       * @request GET:/repos/{owner}/{repo}/releases/latest\n       * @secure\n       */\n      repoGetLatestRelease: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/releases/latest`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetReleaseByTag\n       * @summary Get a release by tag name\n       * @request GET:/repos/{owner}/{repo}/releases/tags/{tag}\n       * @secure\n       */\n      repoGetReleaseByTag: (owner, repo, tag, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/releases/tags/${tag}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDeleteReleaseByTag\n       * @summary Delete a release by tag name\n       * @request DELETE:/repos/{owner}/{repo}/releases/tags/{tag}\n       * @secure\n       */\n      repoDeleteReleaseByTag: (owner, repo, tag, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/releases/tags/${tag}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetRelease\n       * @summary Get a release\n       * @request GET:/repos/{owner}/{repo}/releases/{id}\n       * @secure\n       */\n      repoGetRelease: (owner, repo, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/releases/${id}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDeleteRelease\n       * @summary Delete a release\n       * @request DELETE:/repos/{owner}/{repo}/releases/{id}\n       * @secure\n       */\n      repoDeleteRelease: (owner, repo, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/releases/${id}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoEditRelease\n       * @summary Update a release\n       * @request PATCH:/repos/{owner}/{repo}/releases/{id}\n       * @secure\n       */\n      repoEditRelease: (owner, repo, id, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/releases/${id}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListReleaseAttachments\n       * @summary List release's attachments\n       * @request GET:/repos/{owner}/{repo}/releases/{id}/assets\n       * @secure\n       */\n      repoListReleaseAttachments: (owner, repo, id, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/releases/${id}/assets`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoCreateReleaseAttachment\n       * @summary Create a release attachment\n       * @request POST:/repos/{owner}/{repo}/releases/{id}/assets\n       * @secure\n       */\n      repoCreateReleaseAttachment: (owner, repo, id, data, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/releases/${id}/assets`,\n        method: \"POST\",\n        query,\n        body: data,\n        secure: true,\n        type: \"multipart/form-data\" /* FormData */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetReleaseAttachment\n       * @summary Get a release attachment\n       * @request GET:/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}\n       * @secure\n       */\n      repoGetReleaseAttachment: (owner, repo, id, attachmentId, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/releases/${id}/assets/${attachmentId}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDeleteReleaseAttachment\n       * @summary Delete a release attachment\n       * @request DELETE:/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}\n       * @secure\n       */\n      repoDeleteReleaseAttachment: (owner, repo, id, attachmentId, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/releases/${id}/assets/${attachmentId}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoEditReleaseAttachment\n       * @summary Edit a release attachment\n       * @request PATCH:/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}\n       * @secure\n       */\n      repoEditReleaseAttachment: (owner, repo, id, attachmentId, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/releases/${id}/assets/${attachmentId}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetReviewers\n       * @summary Return all users that can be requested to review in this repo\n       * @request GET:/repos/{owner}/{repo}/reviewers\n       * @secure\n       */\n      repoGetReviewers: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/reviewers`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetRunnerRegistrationToken\n       * @summary Get a repository's actions runner registration token\n       * @request GET:/repos/{owner}/{repo}/runners/registration-token\n       * @secure\n       */\n      repoGetRunnerRegistrationToken: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/runners/registration-token`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoSigningKey\n       * @summary Get signing-key.gpg for given repository\n       * @request GET:/repos/{owner}/{repo}/signing-key.gpg\n       * @secure\n       */\n      repoSigningKey: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/signing-key.gpg`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListStargazers\n       * @summary List a repo's stargazers\n       * @request GET:/repos/{owner}/{repo}/stargazers\n       * @secure\n       */\n      repoListStargazers: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/stargazers`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListStatuses\n       * @summary Get a commit's statuses\n       * @request GET:/repos/{owner}/{repo}/statuses/{sha}\n       * @secure\n       */\n      repoListStatuses: (owner, repo, sha, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/statuses/${sha}`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoCreateStatus\n       * @summary Create a commit status\n       * @request POST:/repos/{owner}/{repo}/statuses/{sha}\n       * @secure\n       */\n      repoCreateStatus: (owner, repo, sha, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/statuses/${sha}`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListSubscribers\n       * @summary List a repo's watchers\n       * @request GET:/repos/{owner}/{repo}/subscribers\n       * @secure\n       */\n      repoListSubscribers: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/subscribers`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name UserCurrentCheckSubscription\n       * @summary Check if the current user is watching a repo\n       * @request GET:/repos/{owner}/{repo}/subscription\n       * @secure\n       */\n      userCurrentCheckSubscription: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/subscription`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name UserCurrentPutSubscription\n       * @summary Watch a repo\n       * @request PUT:/repos/{owner}/{repo}/subscription\n       * @secure\n       */\n      userCurrentPutSubscription: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/subscription`,\n        method: \"PUT\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name UserCurrentDeleteSubscription\n       * @summary Unwatch a repo\n       * @request DELETE:/repos/{owner}/{repo}/subscription\n       * @secure\n       */\n      userCurrentDeleteSubscription: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/subscription`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListTags\n       * @summary List a repository's tags\n       * @request GET:/repos/{owner}/{repo}/tags\n       * @secure\n       */\n      repoListTags: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/tags`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoCreateTag\n       * @summary Create a new git tag in a repository\n       * @request POST:/repos/{owner}/{repo}/tags\n       * @secure\n       */\n      repoCreateTag: (owner, repo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/tags`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetTag\n       * @summary Get the tag of a repository by tag name\n       * @request GET:/repos/{owner}/{repo}/tags/{tag}\n       * @secure\n       */\n      repoGetTag: (owner, repo, tag, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/tags/${tag}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDeleteTag\n       * @summary Delete a repository's tag by name\n       * @request DELETE:/repos/{owner}/{repo}/tags/{tag}\n       * @secure\n       */\n      repoDeleteTag: (owner, repo, tag, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/tags/${tag}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListTeams\n       * @summary List a repository's teams\n       * @request GET:/repos/{owner}/{repo}/teams\n       * @secure\n       */\n      repoListTeams: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/teams`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoCheckTeam\n       * @summary Check if a team is assigned to a repository\n       * @request GET:/repos/{owner}/{repo}/teams/{team}\n       * @secure\n       */\n      repoCheckTeam: (owner, repo, team, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/teams/${team}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoAddTeam\n       * @summary Add a team to a repository\n       * @request PUT:/repos/{owner}/{repo}/teams/{team}\n       * @secure\n       */\n      repoAddTeam: (owner, repo, team, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/teams/${team}`,\n        method: \"PUT\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDeleteTeam\n       * @summary Delete a team from a repository\n       * @request DELETE:/repos/{owner}/{repo}/teams/{team}\n       * @secure\n       */\n      repoDeleteTeam: (owner, repo, team, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/teams/${team}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoTrackedTimes\n       * @summary List a repo's tracked times\n       * @request GET:/repos/{owner}/{repo}/times\n       * @secure\n       */\n      repoTrackedTimes: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/times`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name UserTrackedTimes\n       * @summary List a user's tracked times in a repo\n       * @request GET:/repos/{owner}/{repo}/times/{user}\n       * @deprecated\n       * @secure\n       */\n      userTrackedTimes: (owner, repo, user, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/times/${user}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoListTopics\n       * @summary Get list of topics that a repository has\n       * @request GET:/repos/{owner}/{repo}/topics\n       * @secure\n       */\n      repoListTopics: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/topics`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoUpdateTopics\n       * @summary Replace list of topics for a repository\n       * @request PUT:/repos/{owner}/{repo}/topics\n       * @secure\n       */\n      repoUpdateTopics: (owner, repo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/topics`,\n        method: \"PUT\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoAddTopic\n       * @summary Add a topic to a repository\n       * @request PUT:/repos/{owner}/{repo}/topics/{topic}\n       * @secure\n       */\n      repoAddTopic: (owner, repo, topic, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/topics/${topic}`,\n        method: \"PUT\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDeleteTopic\n       * @summary Delete a topic from a repository\n       * @request DELETE:/repos/{owner}/{repo}/topics/{topic}\n       * @secure\n       */\n      repoDeleteTopic: (owner, repo, topic, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/topics/${topic}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoTransfer\n       * @summary Transfer a repo ownership\n       * @request POST:/repos/{owner}/{repo}/transfer\n       * @secure\n       */\n      repoTransfer: (owner, repo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/transfer`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name AcceptRepoTransfer\n       * @summary Accept a repo transfer\n       * @request POST:/repos/{owner}/{repo}/transfer/accept\n       * @secure\n       */\n      acceptRepoTransfer: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/transfer/accept`,\n        method: \"POST\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RejectRepoTransfer\n       * @summary Reject a repo transfer\n       * @request POST:/repos/{owner}/{repo}/transfer/reject\n       * @secure\n       */\n      rejectRepoTransfer: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/transfer/reject`,\n        method: \"POST\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoCreateWikiPage\n       * @summary Create a wiki page\n       * @request POST:/repos/{owner}/{repo}/wiki/new\n       * @secure\n       */\n      repoCreateWikiPage: (owner, repo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/wiki/new`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetWikiPage\n       * @summary Get a wiki page\n       * @request GET:/repos/{owner}/{repo}/wiki/page/{pageName}\n       * @secure\n       */\n      repoGetWikiPage: (owner, repo, pageName, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/wiki/page/${pageName}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoDeleteWikiPage\n       * @summary Delete a wiki page\n       * @request DELETE:/repos/{owner}/{repo}/wiki/page/{pageName}\n       * @secure\n       */\n      repoDeleteWikiPage: (owner, repo, pageName, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/wiki/page/${pageName}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoEditWikiPage\n       * @summary Edit a wiki page\n       * @request PATCH:/repos/{owner}/{repo}/wiki/page/{pageName}\n       * @secure\n       */\n      repoEditWikiPage: (owner, repo, pageName, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/wiki/page/${pageName}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetWikiPages\n       * @summary Get all wiki pages\n       * @request GET:/repos/{owner}/{repo}/wiki/pages\n       * @secure\n       */\n      repoGetWikiPages: (owner, repo, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/wiki/pages`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetWikiPageRevisions\n       * @summary Get revisions of a wiki page\n       * @request GET:/repos/{owner}/{repo}/wiki/revisions/{pageName}\n       * @secure\n       */\n      repoGetWikiPageRevisions: (owner, repo, pageName, query, params = {}) => this.request(__spreadValues({\n        path: `/repos/${owner}/${repo}/wiki/revisions/${pageName}`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name GenerateRepo\n       * @summary Create a repository using a template\n       * @request POST:/repos/{template_owner}/{template_repo}/generate\n       * @secure\n       */\n      generateRepo: (templateOwner, templateRepo, body, params = {}) => this.request(__spreadValues({\n        path: `/repos/${templateOwner}/${templateRepo}/generate`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params))\n    };\n    this.repositories = {\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name RepoGetById\n       * @summary Get a repository by id\n       * @request GET:/repositories/{id}\n       * @secure\n       */\n      repoGetById: (id, params = {}) => this.request(__spreadValues({\n        path: `/repositories/${id}`,\n        method: \"GET\",\n        secure: true\n      }, params))\n    };\n    this.settings = {\n      /**\n       * No description\n       *\n       * @tags settings\n       * @name GetGeneralApiSettings\n       * @summary Get instance's global settings for api\n       * @request GET:/settings/api\n       * @secure\n       */\n      getGeneralApiSettings: (params = {}) => this.request(__spreadValues({\n        path: `/settings/api`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags settings\n       * @name GetGeneralAttachmentSettings\n       * @summary Get instance's global settings for Attachment\n       * @request GET:/settings/attachment\n       * @secure\n       */\n      getGeneralAttachmentSettings: (params = {}) => this.request(__spreadValues({\n        path: `/settings/attachment`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags settings\n       * @name GetGeneralRepositorySettings\n       * @summary Get instance's global settings for repositories\n       * @request GET:/settings/repository\n       * @secure\n       */\n      getGeneralRepositorySettings: (params = {}) => this.request(__spreadValues({\n        path: `/settings/repository`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags settings\n       * @name GetGeneralUiSettings\n       * @summary Get instance's global settings for ui\n       * @request GET:/settings/ui\n       * @secure\n       */\n      getGeneralUiSettings: (params = {}) => this.request(__spreadValues({\n        path: `/settings/ui`,\n        method: \"GET\",\n        secure: true\n      }, params))\n    };\n    this.signingKeyGpg = {\n      /**\n       * No description\n       *\n       * @tags miscellaneous\n       * @name GetSigningKey\n       * @summary Get default signing-key.gpg\n       * @request GET:/signing-key.gpg\n       * @secure\n       */\n      getSigningKey: (params = {}) => this.request(__spreadValues({\n        path: `/signing-key.gpg`,\n        method: \"GET\",\n        secure: true\n      }, params))\n    };\n    this.teams = {\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgGetTeam\n       * @summary Get a team\n       * @request GET:/teams/{id}\n       * @secure\n       */\n      orgGetTeam: (id, params = {}) => this.request(__spreadValues({\n        path: `/teams/${id}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgDeleteTeam\n       * @summary Delete a team\n       * @request DELETE:/teams/{id}\n       * @secure\n       */\n      orgDeleteTeam: (id, params = {}) => this.request(__spreadValues({\n        path: `/teams/${id}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgEditTeam\n       * @summary Edit a team\n       * @request PATCH:/teams/{id}\n       * @secure\n       */\n      orgEditTeam: (id, body, params = {}) => this.request(__spreadValues({\n        path: `/teams/${id}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgListTeamActivityFeeds\n       * @summary List a team's activity feeds\n       * @request GET:/teams/{id}/activities/feeds\n       * @secure\n       */\n      orgListTeamActivityFeeds: (id, query, params = {}) => this.request(__spreadValues({\n        path: `/teams/${id}/activities/feeds`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgListTeamMembers\n       * @summary List a team's members\n       * @request GET:/teams/{id}/members\n       * @secure\n       */\n      orgListTeamMembers: (id, query, params = {}) => this.request(__spreadValues({\n        path: `/teams/${id}/members`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgListTeamMember\n       * @summary List a particular member of team\n       * @request GET:/teams/{id}/members/{username}\n       * @secure\n       */\n      orgListTeamMember: (id, username, params = {}) => this.request(__spreadValues({\n        path: `/teams/${id}/members/${username}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgAddTeamMember\n       * @summary Add a team member\n       * @request PUT:/teams/{id}/members/{username}\n       * @secure\n       */\n      orgAddTeamMember: (id, username, params = {}) => this.request(__spreadValues({\n        path: `/teams/${id}/members/${username}`,\n        method: \"PUT\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgRemoveTeamMember\n       * @summary Remove a team member\n       * @request DELETE:/teams/{id}/members/{username}\n       * @secure\n       */\n      orgRemoveTeamMember: (id, username, params = {}) => this.request(__spreadValues({\n        path: `/teams/${id}/members/${username}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgListTeamRepos\n       * @summary List a team's repos\n       * @request GET:/teams/{id}/repos\n       * @secure\n       */\n      orgListTeamRepos: (id, query, params = {}) => this.request(__spreadValues({\n        path: `/teams/${id}/repos`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgListTeamRepo\n       * @summary List a particular repo of team\n       * @request GET:/teams/{id}/repos/{org}/{repo}\n       * @secure\n       */\n      orgListTeamRepo: (id, org, repo, params = {}) => this.request(__spreadValues({\n        path: `/teams/${id}/repos/${org}/${repo}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgAddTeamRepository\n       * @summary Add a repository to a team\n       * @request PUT:/teams/{id}/repos/{org}/{repo}\n       * @secure\n       */\n      orgAddTeamRepository: (id, org, repo, params = {}) => this.request(__spreadValues({\n        path: `/teams/${id}/repos/${org}/${repo}`,\n        method: \"PUT\",\n        secure: true\n      }, params)),\n      /**\n       * @description This does not delete the repository, it only removes the repository from the team.\n       *\n       * @tags organization\n       * @name OrgRemoveTeamRepository\n       * @summary Remove a repository from a team\n       * @request DELETE:/teams/{id}/repos/{org}/{repo}\n       * @secure\n       */\n      orgRemoveTeamRepository: (id, org, repo, params = {}) => this.request(__spreadValues({\n        path: `/teams/${id}/repos/${org}/${repo}`,\n        method: \"DELETE\",\n        secure: true\n      }, params))\n    };\n    this.topics = {\n      /**\n       * No description\n       *\n       * @tags repository\n       * @name TopicSearch\n       * @summary search topics via keyword\n       * @request GET:/topics/search\n       * @secure\n       */\n      topicSearch: (query, params = {}) => this.request(__spreadValues({\n        path: `/topics/search`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params))\n    };\n    this.user = {\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserGetCurrent\n       * @summary Get the authenticated user\n       * @request GET:/user\n       * @secure\n       */\n      userGetCurrent: (params = {}) => this.request(__spreadValues({\n        path: `/user`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserGetRunnerRegistrationToken\n       * @summary Get an user's actions runner registration token\n       * @request GET:/user/actions/runners/registration-token\n       * @secure\n       */\n      userGetRunnerRegistrationToken: (params = {}) => this.request(__spreadValues({\n        path: `/user/actions/runners/registration-token`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UpdateUserSecret\n       * @summary Create or Update a secret value in a user scope\n       * @request PUT:/user/actions/secrets/{secretname}\n       * @secure\n       */\n      updateUserSecret: (secretname, body, params = {}) => this.request(__spreadValues({\n        path: `/user/actions/secrets/${secretname}`,\n        method: \"PUT\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name DeleteUserSecret\n       * @summary Delete a secret in a user scope\n       * @request DELETE:/user/actions/secrets/{secretname}\n       * @secure\n       */\n      deleteUserSecret: (secretname, params = {}) => this.request(__spreadValues({\n        path: `/user/actions/secrets/${secretname}`,\n        method: \"DELETE\",\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name GetUserVariablesList\n       * @summary Get the user-level list of variables which is created by current doer\n       * @request GET:/user/actions/variables\n       * @secure\n       */\n      getUserVariablesList: (query, params = {}) => this.request(__spreadValues({\n        path: `/user/actions/variables`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name GetUserVariable\n       * @summary Get a user-level variable which is created by current doer\n       * @request GET:/user/actions/variables/{variablename}\n       * @secure\n       */\n      getUserVariable: (variablename, params = {}) => this.request(__spreadValues({\n        path: `/user/actions/variables/${variablename}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UpdateUserVariable\n       * @summary Update a user-level variable which is created by current doer\n       * @request PUT:/user/actions/variables/{variablename}\n       * @secure\n       */\n      updateUserVariable: (variablename, body, params = {}) => this.request(__spreadValues({\n        path: `/user/actions/variables/${variablename}`,\n        method: \"PUT\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name CreateUserVariable\n       * @summary Create a user-level variable\n       * @request POST:/user/actions/variables/{variablename}\n       * @secure\n       */\n      createUserVariable: (variablename, body, params = {}) => this.request(__spreadValues({\n        path: `/user/actions/variables/${variablename}`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name DeleteUserVariable\n       * @summary Delete a user-level variable which is created by current doer\n       * @request DELETE:/user/actions/variables/{variablename}\n       * @secure\n       */\n      deleteUserVariable: (variablename, params = {}) => this.request(__spreadValues({\n        path: `/user/actions/variables/${variablename}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserGetOauth2Application\n       * @summary List the authenticated user's oauth2 applications\n       * @request GET:/user/applications/oauth2\n       * @secure\n       */\n      userGetOauth2Application: (query, params = {}) => this.request(__spreadValues({\n        path: `/user/applications/oauth2`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCreateOAuth2Application\n       * @summary creates a new OAuth2 application\n       * @request POST:/user/applications/oauth2\n       * @secure\n       */\n      userCreateOAuth2Application: (body, params = {}) => this.request(__spreadValues({\n        path: `/user/applications/oauth2`,\n        method: \"POST\",\n        body,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserGetOAuth2Application\n       * @summary get an OAuth2 Application\n       * @request GET:/user/applications/oauth2/{id}\n       * @secure\n       */\n      userGetOAuth2Application: (id, params = {}) => this.request(__spreadValues({\n        path: `/user/applications/oauth2/${id}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserDeleteOAuth2Application\n       * @summary delete an OAuth2 Application\n       * @request DELETE:/user/applications/oauth2/{id}\n       * @secure\n       */\n      userDeleteOAuth2Application: (id, params = {}) => this.request(__spreadValues({\n        path: `/user/applications/oauth2/${id}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserUpdateOAuth2Application\n       * @summary update an OAuth2 Application, this includes regenerating the client secret\n       * @request PATCH:/user/applications/oauth2/{id}\n       * @secure\n       */\n      userUpdateOAuth2Application: (id, body, params = {}) => this.request(__spreadValues({\n        path: `/user/applications/oauth2/${id}`,\n        method: \"PATCH\",\n        body,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserUpdateAvatar\n       * @summary Update Avatar\n       * @request POST:/user/avatar\n       * @secure\n       */\n      userUpdateAvatar: (body, params = {}) => this.request(__spreadValues({\n        path: `/user/avatar`,\n        method: \"POST\",\n        body,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserDeleteAvatar\n       * @summary Delete Avatar\n       * @request DELETE:/user/avatar\n       * @secure\n       */\n      userDeleteAvatar: (params = {}) => this.request(__spreadValues({\n        path: `/user/avatar`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserListBlocks\n       * @summary List users blocked by the authenticated user\n       * @request GET:/user/blocks\n       * @secure\n       */\n      userListBlocks: (query, params = {}) => this.request(__spreadValues({\n        path: `/user/blocks`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCheckUserBlock\n       * @summary Check if a user is blocked by the authenticated user\n       * @request GET:/user/blocks/{username}\n       * @secure\n       */\n      userCheckUserBlock: (username, params = {}) => this.request(__spreadValues({\n        path: `/user/blocks/${username}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserBlockUser\n       * @summary Block a user\n       * @request PUT:/user/blocks/{username}\n       * @secure\n       */\n      userBlockUser: (username, query, params = {}) => this.request(__spreadValues({\n        path: `/user/blocks/${username}`,\n        method: \"PUT\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserUnblockUser\n       * @summary Unblock a user\n       * @request DELETE:/user/blocks/{username}\n       * @secure\n       */\n      userUnblockUser: (username, params = {}) => this.request(__spreadValues({\n        path: `/user/blocks/${username}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserListEmails\n       * @summary List the authenticated user's email addresses\n       * @request GET:/user/emails\n       * @secure\n       */\n      userListEmails: (params = {}) => this.request(__spreadValues({\n        path: `/user/emails`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserAddEmail\n       * @summary Add email addresses\n       * @request POST:/user/emails\n       * @secure\n       */\n      userAddEmail: (body, params = {}) => this.request(__spreadValues({\n        path: `/user/emails`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserDeleteEmail\n       * @summary Delete email addresses\n       * @request DELETE:/user/emails\n       * @secure\n       */\n      userDeleteEmail: (body, params = {}) => this.request(__spreadValues({\n        path: `/user/emails`,\n        method: \"DELETE\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentListFollowers\n       * @summary List the authenticated user's followers\n       * @request GET:/user/followers\n       * @secure\n       */\n      userCurrentListFollowers: (query, params = {}) => this.request(__spreadValues({\n        path: `/user/followers`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentListFollowing\n       * @summary List the users that the authenticated user is following\n       * @request GET:/user/following\n       * @secure\n       */\n      userCurrentListFollowing: (query, params = {}) => this.request(__spreadValues({\n        path: `/user/following`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentCheckFollowing\n       * @summary Check whether a user is followed by the authenticated user\n       * @request GET:/user/following/{username}\n       * @secure\n       */\n      userCurrentCheckFollowing: (username, params = {}) => this.request(__spreadValues({\n        path: `/user/following/${username}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentPutFollow\n       * @summary Follow a user\n       * @request PUT:/user/following/{username}\n       * @secure\n       */\n      userCurrentPutFollow: (username, params = {}) => this.request(__spreadValues({\n        path: `/user/following/${username}`,\n        method: \"PUT\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentDeleteFollow\n       * @summary Unfollow a user\n       * @request DELETE:/user/following/{username}\n       * @secure\n       */\n      userCurrentDeleteFollow: (username, params = {}) => this.request(__spreadValues({\n        path: `/user/following/${username}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name GetVerificationToken\n       * @summary Get a Token to verify\n       * @request GET:/user/gpg_key_token\n       * @secure\n       */\n      getVerificationToken: (params = {}) => this.request(__spreadValues({\n        path: `/user/gpg_key_token`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserVerifyGpgKey\n       * @summary Verify a GPG key\n       * @request POST:/user/gpg_key_verify\n       * @secure\n       */\n      userVerifyGpgKey: (params = {}) => this.request(__spreadValues({\n        path: `/user/gpg_key_verify`,\n        method: \"POST\",\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentListGpgKeys\n       * @summary List the authenticated user's GPG keys\n       * @request GET:/user/gpg_keys\n       * @secure\n       */\n      userCurrentListGpgKeys: (query, params = {}) => this.request(__spreadValues({\n        path: `/user/gpg_keys`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentPostGpgKey\n       * @summary Create a GPG key\n       * @request POST:/user/gpg_keys\n       * @secure\n       */\n      userCurrentPostGpgKey: (Form, params = {}) => this.request(__spreadValues({\n        path: `/user/gpg_keys`,\n        method: \"POST\",\n        body: Form,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentGetGpgKey\n       * @summary Get a GPG key\n       * @request GET:/user/gpg_keys/{id}\n       * @secure\n       */\n      userCurrentGetGpgKey: (id, params = {}) => this.request(__spreadValues({\n        path: `/user/gpg_keys/${id}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentDeleteGpgKey\n       * @summary Remove a GPG key\n       * @request DELETE:/user/gpg_keys/{id}\n       * @secure\n       */\n      userCurrentDeleteGpgKey: (id, params = {}) => this.request(__spreadValues({\n        path: `/user/gpg_keys/${id}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserListHooks\n       * @summary List the authenticated user's webhooks\n       * @request GET:/user/hooks\n       * @secure\n       */\n      userListHooks: (query, params = {}) => this.request(__spreadValues({\n        path: `/user/hooks`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCreateHook\n       * @summary Create a hook\n       * @request POST:/user/hooks\n       * @secure\n       */\n      userCreateHook: (body, params = {}) => this.request(__spreadValues({\n        path: `/user/hooks`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserGetHook\n       * @summary Get a hook\n       * @request GET:/user/hooks/{id}\n       * @secure\n       */\n      userGetHook: (id, params = {}) => this.request(__spreadValues({\n        path: `/user/hooks/${id}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserDeleteHook\n       * @summary Delete a hook\n       * @request DELETE:/user/hooks/{id}\n       * @secure\n       */\n      userDeleteHook: (id, params = {}) => this.request(__spreadValues({\n        path: `/user/hooks/${id}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserEditHook\n       * @summary Update a hook\n       * @request PATCH:/user/hooks/{id}\n       * @secure\n       */\n      userEditHook: (id, body, params = {}) => this.request(__spreadValues({\n        path: `/user/hooks/${id}`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentListKeys\n       * @summary List the authenticated user's public keys\n       * @request GET:/user/keys\n       * @secure\n       */\n      userCurrentListKeys: (query, params = {}) => this.request(__spreadValues({\n        path: `/user/keys`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentPostKey\n       * @summary Create a public key\n       * @request POST:/user/keys\n       * @secure\n       */\n      userCurrentPostKey: (body, params = {}) => this.request(__spreadValues({\n        path: `/user/keys`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentGetKey\n       * @summary Get a public key\n       * @request GET:/user/keys/{id}\n       * @secure\n       */\n      userCurrentGetKey: (id, params = {}) => this.request(__spreadValues({\n        path: `/user/keys/${id}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentDeleteKey\n       * @summary Delete a public key\n       * @request DELETE:/user/keys/{id}\n       * @secure\n       */\n      userCurrentDeleteKey: (id, params = {}) => this.request(__spreadValues({\n        path: `/user/keys/${id}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgListCurrentUserOrgs\n       * @summary List the current user's organizations\n       * @request GET:/user/orgs\n       * @secure\n       */\n      orgListCurrentUserOrgs: (query, params = {}) => this.request(__spreadValues({\n        path: `/user/orgs`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentListRepos\n       * @summary List the repos that the authenticated user owns\n       * @request GET:/user/repos\n       * @secure\n       */\n      userCurrentListRepos: (query, params = {}) => this.request(__spreadValues({\n        path: `/user/repos`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags repository, user\n       * @name CreateCurrentUserRepo\n       * @summary Create a repository\n       * @request POST:/user/repos\n       * @secure\n       */\n      createCurrentUserRepo: (body, params = {}) => this.request(__spreadValues({\n        path: `/user/repos`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name GetUserSettings\n       * @summary Get user settings\n       * @request GET:/user/settings\n       * @secure\n       */\n      getUserSettings: (params = {}) => this.request(__spreadValues({\n        path: `/user/settings`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UpdateUserSettings\n       * @summary Update user settings\n       * @request PATCH:/user/settings\n       * @secure\n       */\n      updateUserSettings: (body, params = {}) => this.request(__spreadValues({\n        path: `/user/settings`,\n        method: \"PATCH\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentListStarred\n       * @summary The repos that the authenticated user has starred\n       * @request GET:/user/starred\n       * @secure\n       */\n      userCurrentListStarred: (query, params = {}) => this.request(__spreadValues({\n        path: `/user/starred`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentCheckStarring\n       * @summary Whether the authenticated is starring the repo\n       * @request GET:/user/starred/{owner}/{repo}\n       * @secure\n       */\n      userCurrentCheckStarring: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/user/starred/${owner}/${repo}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentPutStar\n       * @summary Star the given repo\n       * @request PUT:/user/starred/{owner}/{repo}\n       * @secure\n       */\n      userCurrentPutStar: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/user/starred/${owner}/${repo}`,\n        method: \"PUT\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentDeleteStar\n       * @summary Unstar the given repo\n       * @request DELETE:/user/starred/{owner}/{repo}\n       * @secure\n       */\n      userCurrentDeleteStar: (owner, repo, params = {}) => this.request(__spreadValues({\n        path: `/user/starred/${owner}/${repo}`,\n        method: \"DELETE\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserGetStopWatches\n       * @summary Get list of all existing stopwatches\n       * @request GET:/user/stopwatches\n       * @secure\n       */\n      userGetStopWatches: (query, params = {}) => this.request(__spreadValues({\n        path: `/user/stopwatches`,\n        method: \"GET\",\n        query,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentListSubscriptions\n       * @summary List repositories watched by the authenticated user\n       * @request GET:/user/subscriptions\n       * @secure\n       */\n      userCurrentListSubscriptions: (query, params = {}) => this.request(__spreadValues({\n        path: `/user/subscriptions`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserListTeams\n       * @summary List all the teams a user belongs to\n       * @request GET:/user/teams\n       * @secure\n       */\n      userListTeams: (query, params = {}) => this.request(__spreadValues({\n        path: `/user/teams`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCurrentTrackedTimes\n       * @summary List the current user's tracked times\n       * @request GET:/user/times\n       * @secure\n       */\n      userCurrentTrackedTimes: (query, params = {}) => this.request(__spreadValues({\n        path: `/user/times`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params))\n    };\n    this.users = {\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserSearch\n       * @summary Search for users\n       * @request GET:/users/search\n       * @secure\n       */\n      userSearch: (query, params = {}) => this.request(__spreadValues({\n        path: `/users/search`,\n        method: \"GET\",\n        query,\n        secure: true,\n        format: \"json\"\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserGet\n       * @summary Get a user\n       * @request GET:/users/{username}\n       * @secure\n       */\n      userGet: (username, params = {}) => this.request(__spreadValues({\n        path: `/users/${username}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserListActivityFeeds\n       * @summary List a user's activity feeds\n       * @request GET:/users/{username}/activities/feeds\n       * @secure\n       */\n      userListActivityFeeds: (username, query, params = {}) => this.request(__spreadValues({\n        path: `/users/${username}/activities/feeds`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserListFollowers\n       * @summary List the given user's followers\n       * @request GET:/users/{username}/followers\n       * @secure\n       */\n      userListFollowers: (username, query, params = {}) => this.request(__spreadValues({\n        path: `/users/${username}/followers`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserListFollowing\n       * @summary List the users that the given user is following\n       * @request GET:/users/{username}/following\n       * @secure\n       */\n      userListFollowing: (username, query, params = {}) => this.request(__spreadValues({\n        path: `/users/${username}/following`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCheckFollowing\n       * @summary Check if one user is following another user\n       * @request GET:/users/{username}/following/{target}\n       * @secure\n       */\n      userCheckFollowing: (username, target, params = {}) => this.request(__spreadValues({\n        path: `/users/${username}/following/${target}`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserListGpgKeys\n       * @summary List the given user's GPG keys\n       * @request GET:/users/{username}/gpg_keys\n       * @secure\n       */\n      userListGpgKeys: (username, query, params = {}) => this.request(__spreadValues({\n        path: `/users/${username}/gpg_keys`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserGetHeatmapData\n       * @summary Get a user's heatmap\n       * @request GET:/users/{username}/heatmap\n       * @secure\n       */\n      userGetHeatmapData: (username, params = {}) => this.request(__spreadValues({\n        path: `/users/${username}/heatmap`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserListKeys\n       * @summary List the given user's public keys\n       * @request GET:/users/{username}/keys\n       * @secure\n       */\n      userListKeys: (username, query, params = {}) => this.request(__spreadValues({\n        path: `/users/${username}/keys`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgListUserOrgs\n       * @summary List a user's organizations\n       * @request GET:/users/{username}/orgs\n       * @secure\n       */\n      orgListUserOrgs: (username, query, params = {}) => this.request(__spreadValues({\n        path: `/users/${username}/orgs`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags organization\n       * @name OrgGetUserPermissions\n       * @summary Get user permissions in organization\n       * @request GET:/users/{username}/orgs/{org}/permissions\n       * @secure\n       */\n      orgGetUserPermissions: (username, org, params = {}) => this.request(__spreadValues({\n        path: `/users/${username}/orgs/${org}/permissions`,\n        method: \"GET\",\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserListRepos\n       * @summary List the repos owned by the given user\n       * @request GET:/users/{username}/repos\n       * @secure\n       */\n      userListRepos: (username, query, params = {}) => this.request(__spreadValues({\n        path: `/users/${username}/repos`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserListStarred\n       * @summary The repos that the given user has starred\n       * @request GET:/users/{username}/starred\n       * @secure\n       */\n      userListStarred: (username, query, params = {}) => this.request(__spreadValues({\n        path: `/users/${username}/starred`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserListSubscriptions\n       * @summary List the repositories watched by a user\n       * @request GET:/users/{username}/subscriptions\n       * @secure\n       */\n      userListSubscriptions: (username, query, params = {}) => this.request(__spreadValues({\n        path: `/users/${username}/subscriptions`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserGetTokens\n       * @summary List the authenticated user's access tokens\n       * @request GET:/users/{username}/tokens\n       * @secure\n       */\n      userGetTokens: (username, query, params = {}) => this.request(__spreadValues({\n        path: `/users/${username}/tokens`,\n        method: \"GET\",\n        query,\n        secure: true\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserCreateToken\n       * @summary Create an access token\n       * @request POST:/users/{username}/tokens\n       * @secure\n       */\n      userCreateToken: (username, body, params = {}) => this.request(__spreadValues({\n        path: `/users/${username}/tokens`,\n        method: \"POST\",\n        body,\n        secure: true,\n        type: \"application/json\" /* Json */\n      }, params)),\n      /**\n       * No description\n       *\n       * @tags user\n       * @name UserDeleteAccessToken\n       * @summary delete an access token\n       * @request DELETE:/users/{username}/tokens/{token}\n       * @secure\n       */\n      userDeleteAccessToken: (username, token, params = {}) => this.request(__spreadValues({\n        path: `/users/${username}/tokens/${token}`,\n        method: \"DELETE\",\n        secure: true\n      }, params))\n    };\n    this.version = {\n      /**\n       * No description\n       *\n       * @tags miscellaneous\n       * @name GetVersion\n       * @summary Returns the version of the Gitea application\n       * @request GET:/version\n       * @secure\n       */\n      getVersion: (params = {}) => this.request(__spreadValues({\n        path: `/version`,\n        method: \"GET\",\n        secure: true\n      }, params))\n    };\n  }\n};\n\n// src/index.ts\nfunction giteaApi(baseUrl, options) {\n  return new Api(__spreadProps(__spreadValues({}, options), {\n    baseUrl: `${baseUrl}/api/v1`,\n    baseApiParams: {\n      format: \"json\"\n    },\n    securityWorker: (securityData) => {\n      if (!(options == null ? void 0 : options.token)) {\n        return;\n      }\n      return {\n        secure: true,\n        headers: {\n          Authorization: `Bearer ${options.token}`\n        }\n      };\n    }\n  }));\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Api,\n  ContentType,\n  HttpClient,\n  giteaApi\n});\n/**\n * @title Gitea API\n * @version 1.22.0\n * @license MIT (http://opensource.org/licenses/MIT)\n * @baseUrl /api/v1\n *\n * This documentation describes the Gitea API.\n */\n","module.exports = require('./lib/tunnel');\n","'use strict';\n\nvar net = require('net');\nvar tls = require('tls');\nvar http = require('http');\nvar https = require('https');\nvar events = require('events');\nvar assert = require('assert');\nvar util = require('util');\n\n\nexports.httpOverHttp = httpOverHttp;\nexports.httpsOverHttp = httpsOverHttp;\nexports.httpOverHttps = httpOverHttps;\nexports.httpsOverHttps = httpsOverHttps;\n\n\nfunction httpOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  return agent;\n}\n\nfunction httpsOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\nfunction httpOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  return agent;\n}\n\nfunction httpsOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\n\nfunction TunnelingAgent(options) {\n  var self = this;\n  self.options = options || {};\n  self.proxyOptions = self.options.proxy || {};\n  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;\n  self.requests = [];\n  self.sockets = [];\n\n  self.on('free', function onFree(socket, host, port, localAddress) {\n    var options = toOptions(host, port, localAddress);\n    for (var i = 0, len = self.requests.length; i < len; ++i) {\n      var pending = self.requests[i];\n      if (pending.host === options.host && pending.port === options.port) {\n        // Detect the request to connect same origin server,\n        // reuse the connection.\n        self.requests.splice(i, 1);\n        pending.request.onSocket(socket);\n        return;\n      }\n    }\n    socket.destroy();\n    self.removeSocket(socket);\n  });\n}\nutil.inherits(TunnelingAgent, events.EventEmitter);\n\nTunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {\n  var self = this;\n  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));\n\n  if (self.sockets.length >= this.maxSockets) {\n    // We are over limit so we'll add it to the queue.\n    self.requests.push(options);\n    return;\n  }\n\n  // If we are under maxSockets create a new one.\n  self.createSocket(options, function(socket) {\n    socket.on('free', onFree);\n    socket.on('close', onCloseOrRemove);\n    socket.on('agentRemove', onCloseOrRemove);\n    req.onSocket(socket);\n\n    function onFree() {\n      self.emit('free', socket, options);\n    }\n\n    function onCloseOrRemove(err) {\n      self.removeSocket(socket);\n      socket.removeListener('free', onFree);\n      socket.removeListener('close', onCloseOrRemove);\n      socket.removeListener('agentRemove', onCloseOrRemove);\n    }\n  });\n};\n\nTunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n  var self = this;\n  var placeholder = {};\n  self.sockets.push(placeholder);\n\n  var connectOptions = mergeOptions({}, self.proxyOptions, {\n    method: 'CONNECT',\n    path: options.host + ':' + options.port,\n    agent: false,\n    headers: {\n      host: options.host + ':' + options.port\n    }\n  });\n  if (options.localAddress) {\n    connectOptions.localAddress = options.localAddress;\n  }\n  if (connectOptions.proxyAuth) {\n    connectOptions.headers = connectOptions.headers || {};\n    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\n        new Buffer(connectOptions.proxyAuth).toString('base64');\n  }\n\n  debug('making CONNECT request');\n  var connectReq = self.request(connectOptions);\n  connectReq.useChunkedEncodingByDefault = false; // for v0.6\n  connectReq.once('response', onResponse); // for v0.6\n  connectReq.once('upgrade', onUpgrade);   // for v0.6\n  connectReq.once('connect', onConnect);   // for v0.7 or later\n  connectReq.once('error', onError);\n  connectReq.end();\n\n  function onResponse(res) {\n    // Very hacky. This is necessary to avoid http-parser leaks.\n    res.upgrade = true;\n  }\n\n  function onUpgrade(res, socket, head) {\n    // Hacky.\n    process.nextTick(function() {\n      onConnect(res, socket, head);\n    });\n  }\n\n  function onConnect(res, socket, head) {\n    connectReq.removeAllListeners();\n    socket.removeAllListeners();\n\n    if (res.statusCode !== 200) {\n      debug('tunneling socket could not be established, statusCode=%d',\n        res.statusCode);\n      socket.destroy();\n      var error = new Error('tunneling socket could not be established, ' +\n        'statusCode=' + res.statusCode);\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    if (head.length > 0) {\n      debug('got illegal response body from proxy');\n      socket.destroy();\n      var error = new Error('got illegal response body from proxy');\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    debug('tunneling connection has established');\n    self.sockets[self.sockets.indexOf(placeholder)] = socket;\n    return cb(socket);\n  }\n\n  function onError(cause) {\n    connectReq.removeAllListeners();\n\n    debug('tunneling socket could not be established, cause=%s\\n',\n          cause.message, cause.stack);\n    var error = new Error('tunneling socket could not be established, ' +\n                          'cause=' + cause.message);\n    error.code = 'ECONNRESET';\n    options.request.emit('error', error);\n    self.removeSocket(placeholder);\n  }\n};\n\nTunnelingAgent.prototype.removeSocket = function removeSocket(socket) {\n  var pos = this.sockets.indexOf(socket)\n  if (pos === -1) {\n    return;\n  }\n  this.sockets.splice(pos, 1);\n\n  var pending = this.requests.shift();\n  if (pending) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(pending, function(socket) {\n      pending.request.onSocket(socket);\n    });\n  }\n};\n\nfunction createSecureSocket(options, cb) {\n  var self = this;\n  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {\n    var hostHeader = options.request.getHeader('host');\n    var tlsOptions = mergeOptions({}, self.options, {\n      socket: socket,\n      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host\n    });\n\n    // 0 is dummy port for v0.6\n    var secureSocket = tls.connect(0, tlsOptions);\n    self.sockets[self.sockets.indexOf(socket)] = secureSocket;\n    cb(secureSocket);\n  });\n}\n\n\nfunction toOptions(host, port, localAddress) {\n  if (typeof host === 'string') { // since v0.10\n    return {\n      host: host,\n      port: port,\n      localAddress: localAddress\n    };\n  }\n  return host; // for v0.11 or later\n}\n\nfunction mergeOptions(target) {\n  for (var i = 1, len = arguments.length; i < len; ++i) {\n    var overrides = arguments[i];\n    if (typeof overrides === 'object') {\n      var keys = Object.keys(overrides);\n      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {\n        var k = keys[j];\n        if (overrides[k] !== undefined) {\n          target[k] = overrides[k];\n        }\n      }\n    }\n  }\n  return target;\n}\n\n\nvar debug;\nif (process.env.NODE_DEBUG && /\\btunnel\\b/.test(process.env.NODE_DEBUG)) {\n  debug = function() {\n    var args = Array.prototype.slice.call(arguments);\n    if (typeof args[0] === 'string') {\n      args[0] = 'TUNNEL: ' + args[0];\n    } else {\n      args.unshift('TUNNEL:');\n    }\n    console.error.apply(console, args);\n  }\n} else {\n  debug = function() {};\n}\nexports.debug = debug; // for test\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\nObject.defineProperty(exports, \"NIL\", {\n  enumerable: true,\n  get: function () {\n    return _nil.default;\n  }\n});\nObject.defineProperty(exports, \"version\", {\n  enumerable: true,\n  get: function () {\n    return _version.default;\n  }\n});\nObject.defineProperty(exports, \"validate\", {\n  enumerable: true,\n  get: function () {\n    return _validate.default;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function () {\n    return _stringify.default;\n  }\n});\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function () {\n    return _parse.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nvar _nil = _interopRequireDefault(require(\"./nil.js\"));\n\nvar _version = _interopRequireDefault(require(\"./version.js\"));\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction md5(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return _crypto.default.createHash('md5').update(bytes).digest();\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = '00000000-0000-0000-0000-000000000000';\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parse(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nvar _default = parse;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\n\nfunction rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    _crypto.default.randomFillSync(rnds8Pool);\n\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction sha1(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return _crypto.default.createHash('sha1').update(bytes).digest();\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nvar _default = stringify;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _stringify.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = (0, _parse.default)(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return (0, _stringify.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _stringify.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regex = _interopRequireDefault(require(\"./regex.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex.default.test(uuid);\n}\n\nvar _default = validate;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction version(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\nvar _default = version;\nexports.default = _default;","module.exports = require(\"assert\");","module.exports = require(\"crypto\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"tls\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(109);\n",""],"names":[],"sourceRoot":""}